default namespace msb = "http://schemas.microsoft.com/developer/msbuild/2003"
namespace local = ""
namespace inh = inherit
namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"

start |= Project

Project = 
   ## An MSBuild Project
   ##         

   element Project
   {
      ProjectLevelTagExceptTargetOrImportType*,
      TargetOrImportType,
      ProjectLevelTagType*,
      attribute DefaultTargets
      {
         ## Optional semi-colon separated list of one or more targets that will be built if no targets are otherwise specified
         ##                 

         xsd:string
      }?,
      attribute InitialTargets
      {
         ## Optional semi-colon separated list of targets that should always be built before any other targets
         ##                 

         xsd:string
      }?,
      attribute Sdk
      {
         ## Optional string describing the MSBuild SDK(s) this project should be built with
         ##                 

         xsd:string
      }?,
      attribute ToolsVersion
      {
         ## Optional string describing the toolset version this project should normally be built with
         ##                 

         xsd:string
      }?
   }

ProjectLevelTagExceptTargetOrImportType = 
   element PropertyGroup { PropertyGroupType }
 | element ItemGroup { ItemGroupType }
 | element ItemDefinitionGroup { ItemDefinitionGroupType }
 | element Choose { ChooseType }
 | element UsingTask { UsingTaskType }
 | element ProjectExtensions { ProjectExtensionsType }

ProjectLevelTagType = 
   element PropertyGroup { PropertyGroupType }
 | element ItemGroup { ItemGroupType }
 | element ItemDefinitionGroup { ItemDefinitionGroupType }
 | element Choose { ChooseType }
 | element UsingTask { UsingTaskType }
 | element Target { TargetType }
 | element Import { ImportType }
 | element ImportGroup { ImportGroupType }
 | element ProjectExtensions { ProjectExtensionsType }

TargetOrImportType = 
   element Target { TargetType }
 | element Import { ImportType }
 | element ImportGroup { ImportGroupType }

## Groups tasks into a section of the build process
##         

TargetType = 
   (
      Task
    | element PropertyGroup { PropertyGroupType }
    | element ItemGroup { ItemGroupType }
   )*,
   element OnError { OnErrorType }*,
   attribute Name
   {
      non_empty_string
      >>
      a:documentation [ """Name of the target """ ]
   },
   attribute DependsOnTargets
   {
      ## Optional semi-colon separated list of targets that should be run before this target
      ##             

      xsd:string
   }?,
   attribute Inputs
   {
      ## Optional semi-colon separated list of files that form inputs into this target. Their timestamps will be compared with the timestamps of files in Outputs to determine whether the Target is up to date
      ##             

      xsd:string
   }?,
   attribute Outputs
   {
      ## Optional semi-colon separated list of files that form outputs into this target. Their timestamps will be compared with the timestamps of files in Inputs to determine whether the Target is up to date
      ##             

      xsd:string
   }?,
   attribute Condition
   {
      ## Optional expression evaluated to determine whether the Target and the targets it depends on should be run
      ##             

      xsd:string
   }?,
   attribute KeepDuplicateOutputs
   {
      ## Optional expression evaluated to determine whether duplicate items in the Target's Returns should be removed before returning them. The default is not to eliminate duplicates.
      ##             

      xsd:string
   }?,
   attribute Returns
   {
      ## Optional expression evaluated to determine which items generated by the target should be returned by the target. If there are no Returns attributes on Targets in the file, the Outputs attributes are used instead for this purpose.
      ##             

      xsd:string
   }?,
   attribute BeforeTargets
   {
      ## Optional semi-colon separated list of targets that this target should run before.
      ##             

      xsd:string
   }?,
   attribute AfterTargets
   {
      ## Optional semi-colon separated list of targets that this target should run after.
      ##             

      xsd:string
   }?,
   attribute Label
   {
      ## Optional expression. Used to identify or order system and user elements
      ##             

      xsd:string
   }?

## Groups property definitions
##         

PropertyGroupType = 
   Property,
   attribute Condition
   {
      ## Optional expression evaluated to determine whether the PropertyGroup should be used
      ##             

      xsd:string
   }?,
   attribute Label
   {
      ## Optional expression. Used to identify or order system and user elements
      ##             

      xsd:string
   }?

## Groups import definitions
##         

ImportGroupType = 
   element Import { ImportType },
   attribute Condition
   {
      ## Optional expression evaluated to determine whether the ImportGroup should be used
      ##             

      xsd:string
   }?,
   attribute Label
   {
      ## Optional expression. Used to identify or order system and user elements
      ##             

      xsd:string
   }?

## Groups item list definitions
##         

ItemGroupType = 
   (
      Item
    | element Link { LinkItem }
    | element ResourceCompile { ResourceCompile }
    | element PreBuildEvent { PreBuildEventItem }
    | element PostBuildEvent { PostBuildEventItem }
   )*,
   attribute Condition
   {
      ## Optional expression evaluated to determine whether the ItemGroup should be used
      ##             

      xsd:string
   }?,
   attribute Label
   {
      ## Optional expression. Used to identify or order system and user elements
      ##             

      xsd:string
   }?

## Groups item metadata definitions
##         

ItemDefinitionGroupType = 
   (
      Item
    | element Link { LinkItem }
    | element ResourceCompile { ResourceCompile }
    | element PreBuildEvent { PreBuildEventItem }
    | element PostBuildEvent { PostBuildEventItem }
   )*,
   attribute Condition
   {
      ## Optional expression evaluated to determine whether the ItemDefinitionGroup should be used
      ##           

      xsd:string
   }?,
   attribute Label
   {
      ## Optional expression. Used to identify or order system and user elements
      ##             

      xsd:string
   }?

## Groups When and Otherwise elements
##         

ChooseType = 
   element When { WhenType }+,
   element Otherwise { OtherwiseType }?,
   attribute Label
   {
      ## Optional expression. Used to identify or order system and user elements
      ##             

      xsd:string
   }?

## Groups PropertyGroup and/or ItemGroup elements
##         

WhenType = 
   (
      element PropertyGroup { PropertyGroupType }
    | element ItemGroup { ItemGroupType }
    | element Choose { ChooseType }
   ),
   attribute Condition
   {
      ## Optional expression evaluated to determine whether the child PropertyGroups and/or ItemGroups should be used
      ##             

      xsd:string
   }

## Groups PropertyGroup and/or ItemGroup elements that are used if no Conditions on sibling When elements evaluate to true
##         

OtherwiseType = 
   element PropertyGroup { PropertyGroupType }
 | element ItemGroup { ItemGroupType }
 | element Choose { ChooseType }

## Specifies targets to execute in the event of a recoverable error
##         

OnErrorType = 
   attribute Condition
   {
      ## Optional expression evaluated to determine whether the targets should be executed
      ##             

      xsd:string
   }?,
   attribute ExecuteTargets
   {
      non_empty_string
      >>
      a:documentation
      [
         """Semi-colon separated list of targets to execute
            """
      ]
   },
   attribute Label
   {
      ## Optional expression. Used to identify or order system and user elements
      ##             

      xsd:string
   }?

## Defines the assembly containing a task's implementation, or contains the implementation itself.
##       

UsingTaskType = 
   element ParameterGroup { ParameterGroupType }?,
   element Task { UsingTaskBodyType }?,
   attribute Condition
   {
      ## Optional expression evaluated to determine whether the declaration should be evaluated
      ##             

      xsd:string
   }?,
   attribute AssemblyName
   {
      non_empty_string
      >>
      a:documentation
      [
         """Optional name of assembly containing the task. Either AssemblyName or AssemblyFile must be used
            """
      ]
   }?,
   attribute AssemblyFile
   {
      non_empty_string
      >>
      a:documentation
      [
         """Optional path to assembly containing the task. Either AssemblyName or AssemblyFile must be used
            """
      ]
   }?,
   attribute TaskName
   {
      non_empty_string
      >>
      a:documentation [ """Name of task class in the assembly """ ]
   },
   attribute TaskFactory
   {
      non_empty_string
      >>
      a:documentation [ """Name of the task factory class in the assembly """ ]
   }?,
   attribute Architecture
   {
      architecture
      >>
      a:documentation
      [
         """Defines the architecture of the task host that this task should be run in.  Currently supported values:  x86, x64, CurrentArchitecture, and * (any).  If Architecture is not specified, either the task will be run within the MSBuild process, or the task host will be launched using the architecture of the parent MSBuild process

          """
      ]
   }?,
   attribute Runtime
   {
      runtime
      >>
      a:documentation
      [
         """Defines the .NET runtime version of the task host that this task should be run in.  Currently supported values:  CLR2, CLR4, CurrentRuntime, and * (any).  If Runtime is not specified, either the task will be run within the MSBuild process, or the task host will be launched using the runtime of the parent MSBuild process

          """
      ]
   }?

## Groups parameters that are part of an inline task definition.
##         

ParameterGroupType = 
   element * { text }

## Contains the inline task implementation. Content is opaque to MSBuild.
##         

UsingTaskBodyType = 
   element * { text },
   attribute Evaluate
   {
      boolean
      >>
      a:documentation
      [
         """Whether the body should have properties expanded before use. Defaults to false.
            """
      ]
   }?

## Declares that the contents of another project file should be inserted at this location
##         

ImportType = 
   attribute Condition
   {
      ## Optional expression evaluated to determine whether the import should occur
      ##             

      xsd:string
   }?,
   attribute Project
   {
      non_empty_string
      >>
      a:documentation [ """Project file to import """ ]
   },
   attribute Label
   {
      ## Optional expression. Used to identify or order system and user elements
      ##             

      xsd:string
   }?,
   attribute Sdk
   {
      ## Name of the SDK which contains the project file to import
      ##             

      xsd:string
   }?,
   attribute Version
   {
      ## Optional expression used to specify the version of the SDK referenced by this import
      ##             

      xsd:string
   }?,
   attribute MinimumVersion
   {
      ## Optional expression used to specify the minimum SDK version required by the referring import
      ##             

      xsd:string
   }?

## Optional section used by MSBuild hosts, that may contain arbitrary XML content that is ignored by MSBuild itself
##         

ProjectExtensionsType = 
   element * { text }

start |= Item

Item = element Item { SimpleItemType }

SimpleItemType = 
   attribute Condition
   {
      ## Optional expression evaluated to determine whether the items should be evaluated
      ##             

      xsd:string
   }?,
   attribute Include
   {
      ## Semi-colon separated list of files (wildcards are allowed) or other item names to include in this item list
      ##             

      xsd:string
   }?,
   attribute Exclude
   {
      ## Semi-colon separated list of files (wildcards are allowed) or other item names to exclude from the Include list
      ##             

      xsd:string
   }?,
   attribute Remove
   {
      ## Semi-colon separated list of files (wildcards are allowed) or other item names to remove from the existing list contents
      ##             

      xsd:string
   }?,
   attribute Update
   {
      ## Semi-colon separated list of files (wildcards are allowed) or other item names to be updated with the metadata from contained in this xml element
      ##             

      xsd:string
   }?,
   attribute Label
   {
      ## Optional expression. Used to identify or order system and user elements
      ## 
          
      ##           

      xsd:string
   }?

GenericItemType = SimpleItemType, element * { text }

start |= Property

Property = element Property { text }

StringPropertyType = 
   attribute Condition
   {
      ## Optional expression evaluated to determine whether the property should be evaluated
      ##                     

      xsd:string
   },
   attribute Label
   {
      ## Optional expression. Used to identify or order system and user elements
      ## 
                  
      ##                   

      xsd:string
   }

GenericPropertyType = 
   element * { text },
   attribute Condition
   {
      ## Optional expression evaluated to determine whether the property should be evaluated
      ##             

      xsd:string
   }?,
   attribute Label
   {
      ## Optional expression. Used to identify or order system and user elements
      ## 
          
      ##           

      xsd:string
   }?

start |= Task

Task = element Task { TaskType }

TaskType = 
   ## Optional element specifying a specific task output to be gathered
   ##                 

   element Output
   {
      attribute TaskParameter
      {
         non_empty_string
         >>
         a:documentation
         [
            """Task parameter to gather. Matches the name of a .NET Property on the task class that has an [Output] attribute
                        """
         ]
      },
      attribute ItemName
      {
         non_empty_string
         >>
         a:documentation
         [
            """Optional name of an item list to put the gathered outputs into. Either ItemName or PropertyName must be specified
                        """
         ]
      }?,
      attribute PropertyName
      {
         non_empty_string
         >>
         a:documentation
         [
            """Optional name of a property to put the gathered output into. Either PropertyName or ItemName must be specified
                        """
         ]
      }?,
      attribute Condition
      {
         ## Optional expression evaluated to determine whether the output should be gathered
         ##                         

         xsd:string
      }?
   },
   attribute Condition
   {
      ## Optional expression evaluated to determine whether the task should be executed
      ##             

      xsd:string
   }?,
   attribute ContinueOnError
   {
      boolean
      >>
      a:documentation
      [
         """Optional boolean indicating whether a recoverable task error should be ignored. Default false
            """
      ]
   }?,
   attribute Architecture
   {
      architecture
      >>
      a:documentation
      [
         """Defines the bitness of the task if it must be run specifically in a 32bit or 64bit process. If not specified, it will run with the bitness of the build process.  If there are multiple tasks defined in UsingTask with the same name but with different Architecture attribute values, the value of the Architecture attribute specified here will be used to match and select the correct task

          """
      ]
   }?,
   attribute Runtime
   {
      runtime
      >>
      a:documentation
      [
         """Defines the .NET runtime of the task. This must be specified if the task must run on a specific version of the .NET runtime. If not specified, the task will run on the runtime being used by the build process. If there are multiple tasks defined in UsingTask with the same name but with different Runtime attribute values, the value of the Runtime attribute specified here will be used to match and select the correct task

          """
      ]
   }?

non_empty_string = xsd:string { minLength = "1" }

boolean = non_empty_string | ( "true" | "false" )

importance = non_empty_string | ( "high" | "normal" | "low" )

architecture = 
   non_empty_string | ( "*" | "CurrentArchitecture" | "x86" | "x64" )

runtime = non_empty_string | ( "*" | "CurrentRuntime" | "CLR2" | "CLR4" )

LinkItem = 
   SimpleItemType,
   (
      element AdditionalDependencies { text }
    | element OutputFile { text }
    | element AssemblyDebug { text }
    | element SubSystem { text }
    | element ShowProgress { text }
    | element GenerateDebugInformation { text }
    | element EnableCOMDATFolding { text }
    | element OptimizeReferences { text }
    | element Version { text }
    | element Driver { text }
    | element RandomizedBaseAddress { text }
    | element SuppressStartupBanner { text }
    | element AdditionalLibraryDirectories { text }
    | element Profile { text }
    | element LinkStatus { text }
    | element FixedBaseAddress { text }
    | element DataExecutionPrevention { text }
    | element SwapRunFromCD { text }
    | element SwapRunFromNET { text }
    | element RegisterOutput { text }
    | element AllowIsolation { text }
    | element EnableUAC { text }
    | element UACExecutionLevel { text }
    | element UACUIAccess { text }
    | element PreventDllBinding { text }
    | element IgnoreStandardIncludePath { text }
    | element GenerateMapFile { text }
    | element IgnoreEmbeddedIDL { text }
    | element TypeLibraryResourceID { text }
    | element LinkErrorReporting { text }
    | element MapExports { text }
    | element TargetMachine { text }
    | element TreatLinkerWarningAsErrors { text }
    | element ForceFileOutput { text }
    | element CreateHotPatchableImage { text }
    | element SpecifySectionAttributes { text }
    | element MSDOSStubFileName { text }
    | element IgnoreAllDefaultLibraries { text }
    | element IgnoreSpecificDefaultLibraries { text }
    | element ModuleDefinitionFile { text }
    | element AddModuleNamesToAssembly { text }
    | element EmbedManagedResourceFile { text }
    | element ForceSymbolReferences { text }
    | element DelayLoadDLLs { text }
    | element AssemblyLinkResource { text }
    | element AdditionalManifestDependencies { text }
    | element StripPrivateSymbols { text }
    | element MapFileName { text }
    | element MinimumRequiredVersion { text }
    | element HeapReserveSize { text }
    | element HeapCommitSize { text }
    | element StackReserveSize { text }
    | element StackCommitSize { text }
    | element LargeAddressAware { text }
    | element TerminalServerAware { text }
    | element FunctionOrder { text }
    | element ProfileGuidedDatabase { text }
    | element LinkTimeCodeGeneration { text }
    | element MidlCommandFile { text }
    | element MergedIDLBaseFileName { text }
    | element TypeLibraryFile { text }
    | element EntryPointSymbol { text }
    | element BaseAddress { text }
    | element ProgramDatabaseFile { text }
    | element SupportUnloadOfDelayLoadedDLL { text }
    | element SupportNobindOfDelayLoadedDLL { text }
    | element ImportLibrary { text }
    | element MergeSections { text }
    | element CLRThreadAttribute { text }
    | element CLRImageType { text }
    | element KeyFile { text }
    | element KeyContainer { text }
    | element DelaySign { text }
    | element CLRUnmanagedCodeCheck { text }
    | element SectionAlignment { text }
    | element CLRSupportLastError { text }
    | element ImageHasSafeExceptionHandlers { text }
   )*

ResourceCompile = 
   SimpleItemType,
   (
      element Culture { text }
    | element PreprocessorDefinitions { text }
    | element UndefinePreprocessorDefinitions { text }
    | element AdditionalIncludeDirectories { text }
    | element IgnoreStandardIncludePath { text }
    | element ShowProgress { text }
    | element NullTerminateStrings { text }
    | element SuppressStartupBanner { text }
    | element ResourceOutputFileName { text }
   )*

PreBuildEventItem = 
   SimpleItemType,
   ( element Message { text } | element Command { text } )*

PostBuildEventItem = 
   SimpleItemType,
   ( element Message { text } | element Command { text } )*
