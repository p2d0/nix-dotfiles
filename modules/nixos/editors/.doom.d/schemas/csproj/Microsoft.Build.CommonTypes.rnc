default namespace msb = "http://schemas.microsoft.com/developer/msbuild/2003"
namespace local = ""
namespace inh = inherit
namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"

include "Microsoft.Build.Core.rnc"

start |= Reference

Reference = 
   ## Reference to an assembly
   ##         

   element Reference
   {
      SimpleItemType,
      (
         ## Relative or absolute path to the assembly (optional)
         ##                                 

         element HintPath { text }
       | ## Friendly display name (optional)
         ##                                 

         element Name { text }
       | ## Fusion name of the assembly (optional)
         ##                                 

         element FusionName { text }
       | element SpecificVersion
         {
            boolean
            >>
            a:documentation
            [
               """Whether only the version in the fusion name should be referenced (optional, boolean)
                                """
            ]
         }
       | ## Aliases for the reference (optional)
         ##                                 

         element Aliases { text }
       | element Private
         {
            boolean
            >>
            a:documentation
            [
               """Whether the reference should be copied to the output folder (optional, boolean)
                                """
            ]
         }
       | element EmbedInteropTypes
         {
            boolean
            >>
            a:documentation
            [
               """Whether the types in this reference need to embedded into the target assembly - interop assemblies only (optional, boolean)
                            """
            ]
         }
       | ## The minimum required target framework version in order to use this assembly as a reference
         ##                                 

         element RequiredTargetFramework { text }
      ),
      attribute Include
      {
         ## Assembly name or filename
         ##                         

         xsd:string
      }?
   }

start |= SDKReference

SDKReference = 
   ## Reference to an extension SDK
   ##         

   element SDKReference
   {
      SimpleItemType,
      (
         ## Friendly display name (optional)
         ##                                 

         element Name { text }
      ),
      attribute Include
      {
         ## Name and version moniker representing an extension SDK
         ##                         

         xsd:string
      }?
   }

start |= COMReference

COMReference = 
   ## Reference to a COM component
   ##         

   element COMReference
   {
      SimpleItemType,
      (
         ## Friendly display name (optional)
         ##                                 

         element Name { text }
       | ## GUID in the form {00000000-0000-0000-0000-000000000000}
         ##                                 

         element Guid { text }
       | ## Major part of the version number
         ##                                 

         element VersionMajor { text }
       | ## Minor part of the version number
         ##                                 

         element VersionMinor { text }
       | ## Locale ID
         ##                                 

         element Lcid { text }
       | ## Wrapper tool, such as tlbimp
         ##                                 

         element WrapperTool { text }
       | element Isolated
         {
            boolean
            >>
            a:documentation [ """Is it isolated (boolean) """ ]
         }
       | element EmbedInteropTypes
         {
            boolean
            >>
            a:documentation
            [
               """Whether the types in this reference need to embedded into the target assembly - interop assemblies only (optional, boolean)
                            """
            ]
         }
      ),
      attribute Include
      {
         ## COM component name
         ##                         

         xsd:string
      }?
   }

start |= COMFileReference

COMFileReference = 
   element COMFileReference
   {
      SimpleItemType,
      ( element WrapperTool { text } )
   }

start |= PackageReference

PackageReference = 
   ## Reference to a package
   ## 
    
   ##     

   element PackageReference
   {
      SimpleItemType,
      (
         ## Assets to include from this reference
         ## 
                
         ##                 

         element IncludeAssets { text }
       | ## Assets to exclude from this reference
         ## 
                
         ##                 

         element ExcludeAssets { text }
       | ## Assets that are private in this reference
         ## 
                
         ##                 

         element PrivateAssets { text }
      ),
      attribute Include
      {
         ## Name of the package
         ## 
            
         ##             

         xsd:string
      }?,
      attribute Version
      {
         ## Version of dependency
         ## 
            
         ##             

         xsd:string
      }?,
      attribute IncludeAssets
      {
         ## Assets to include from this reference
         ## 
            
         ##             

         xsd:string
      }?,
      attribute ExcludeAssets
      {
         ## Assets to exclude from this reference
         ## 
            
         ##             

         xsd:string
      }?,
      attribute PrivateAssets
      {
         ## Assets that are private in this reference
         ## 
            
         ##             

         xsd:string
      }?
   }

start |= FrameworkReference

FrameworkReference = 
   ## Reference to a shared framework.
   ## 
    
   ##     

   element FrameworkReference
   {
      SimpleItemType,
      (
         ## Controls whether the runtime assets of this shared framework can be trimmed by the IL Linker (if PublishTrimmed is true).
         ## 
                
         ##                 

         element IsTrimmable { text }
       | ## Controls whether the app will target the latest patch of the runtime.  Defaults to true for self-contained apps, false otherwise.
         ## 
                
         ##                 

         element TargetLatestRuntimePatch { text }
      ),
      attribute IsTrimmable
      {
         ## Controls whether the runtime assets of this shared framework can be trimmed by the IL Linker (if PublishTrimmed is true).
         ## 
            
         ##             

         xsd:string
      }?,
      attribute TargetLatestRuntimePatch
      {
         ## Controls whether the app will target the latest patch of the runtime.  Defaults to true for self-contained apps, false otherwise.
         ## 
            
         ##             

         xsd:string
      }?
   }

start |= DotNetCliToolReference

DotNetCliToolReference = 
   ## The CLI tool that the user wants restored in the context of the project
   ## 
    
   ##     

   element DotNetCliToolReference
   {
      SimpleItemType,
      (
         ## Assets to include from this reference
         ## 
                
         ##                 

         element IncludeAssets { text }
       | ## Assets to exclude from this reference
         ## 
                
         ##                 

         element ExcludeAssets { text }
       | ## Assets that are private in this reference
         ## 
                
         ##                 

         element PrivateAssets { text }
      ),
      attribute Include
      {
         ## Package name of the tool. This may differ from its associated reference package name.
         ## 
            
         ##             

         xsd:string
      }?,
      attribute Version
      {
         ## Version of dependency
         ## 
            
         ##             

         xsd:string
      }?
   }

start |= Xdcmake

Xdcmake = 
   element Xdcmake
   {
      SimpleItemType,
      (
         element SuppressStartupBanner { text }
       | element AdditionalDocumentFile { text }
       | element DocumentLibraryDependencies { text }
      )
   }

start |= Bscmake

Bscmake = 
   element Bscmake
   {
      SimpleItemType,
      (
         element PreserveSBR { text }
       | element AdditionalOptions { text }
       | element SuppressStartupBanner { text }
       | element OutputFile { text }
      )
   }

start |= ClCompile

ClCompile = 
   element ClCompile
   {
      SimpleItemType,
      (
         element PrecompiledHeader { attribute Condition { text } }?
       | element AdditionalIncludeDirectories { text }
       | element AdditionalUsingDirectories { text }
       | element CompileAsManaged { attribute Condition { text } }
       | element ErrorReporting { text }
       | element WarningLevel { text }
       | element MinimalRebuild { text }
       | element DebugInformationFormat { text }
       | element PreprocessorDefinitions { text }
       | element Optimization { text }
       | element BasicRuntimeChecks { text }
       | element RuntimeLibrary { text }
       | element FunctionLevelLinking { text }
       | element FloatingPointModel { text }
       | element IntrinsicFunctions { text }
       | element PrecompiledHeaderFile { text }
       | element MultiProcessorCompilation { text }
       | element UseUnicodeForAssemblerListing { text }
       | element UndefinePreprocessorDefinitions { text }
       | element StringPooling { text }
       | element BrowseInformation { text }
       | element FloatingPointExceptions { text }
       | element CreateHotpatchableImage { text }
       | element RuntimeTypeInfo { text }
       | element OpenMPSupport { text }
       | element CallingConvention { text }
       | element DisableSpecificWarnings { text }
       | element ForcedIncludeFiles { text }
       | element ForcedUsingFiles { text }
       | element ShowIncludes { text }
       | element UseFullPaths { text }
       | element OmitDefaultLibName { text }
       | element TreatSpecificWarningsAsErrors { text }
      )*
   }

start |= ClInclude

ClInclude = 
   element ClInclude
   {
      SimpleItemType,
      element AdditionalIncludeDirectories { text }?*
   }

start |= Midl

Midl = 
   element Midl
   {
      SimpleItemType,
      (
         element MkTypLibCompatible { text }
       | element ValidateAllParameters { boolean }
       | element PreprocessorDefinitions { text }
       | element TypeLibraryName { text }
       | element ErrorCheckRefPointers { text }
       | element ErrorCheckStubData { text }
       | element ErrorCheckBounds { text }
       | element HeaderFileName { text }
       | element ErrorCheckEnumRange { text }
       | element ErrorCheckAllocations { text }
       | element WarnAsError { text }
       | element GenerateTypeLibrary { text }
       | element AdditionalIncludeDirectories { text }
       | element IgnoreStandardIncludePath { text }
       | element SuppressStartupBanner { text }
       | element DefaultCharType { text }
       | element TargetEnvironment { text }
       | element GenerateStublessProxies { text }
       | element SuppressCompilerWarnings { text }
       | element ApplicationConfigurationMode { text }
       | element LocaleID { text }
       | element OutputDirectory { text }
       | element DllDataFileName { text }
       | element InterfaceIdentifierFileName { text }
       | element ProxyFileName { text }
       | element GenerateClientFiles { text }
       | element GenerateServerFiles { text }
       | element ClientStubFile { text }
       | element ServerStubFile { text }
       | element TypeLibFormat { text }
       | element CPreprocessOptions { text }
       | element UndefinePreprocessorDefinitions { text }
       | element EnableErrorChecks { text }
       | element RedirectOutputAndErrors { text }
       | element AdditionalOptions { text }
       | element StructMemberAlignment { text }
      )*
   }

start |= ResourceCompile

ResourceCompile = 
   element ResourceCompile
   {
      SimpleItemType,
      (
         element Culture { text }
       | element PreprocessorDefinitions { text }
       | element AdditionalIncludeDirectories { text }
      )*
   }

start |= PreLinkEvent

PreLinkEvent = 
   element PreLinkEvent
   {
      SimpleItemType,
      ( element Message { text } | element Command { text } )*
   }

start |= CustomBuildStep

CustomBuildStep = 
   element CustomBuildStep
   {
      SimpleItemType,
      (
         element Outputs { text }
       | element Message { text }
       | element Inputs { text }
       | element Command { text }
      )*
   }

start |= Manifest

Manifest = 
   element Manifest
   {
      SimpleItemType,
      (
         element AssemblyIdentity { text }
       | element AdditionalManifestFiles { text }
       | element InputResourceManifests { text }
       | element EnableDPIAwareness { text }
       | element TypeLibraryFile { text }
       | element OutputManifestFile { text }
       | element SuppressStartupBanner { text }
       | element VerboseOutput { text }
       | element ResourceOutputFileName { text }
       | element GenerateCatalogFiles { text }
       | element DependencyInformationFile { text }
       | element ManifestFromManagedAssembly { text }
       | element SuppressDependencyElement { text }
       | element GenerateCategoryTags { text }
       | element RegistrarScriptFile { text }
       | element ComponentFileName { text }
       | element ReplacementsFile { text }
       | element UpdateFileHashesSearchPath { text }
       | element AdditionalOptions { text }
       | element OutputResourceManifests { attribute Condition { text } }
      )*
   }

start |= ProjectConfiguration

ProjectConfiguration = 
   element ProjectConfiguration
   {
      SimpleItemType,
      element Configuration { text },
      element Platform { text }
   }

start |= ProjectCapability

ProjectCapability = 
   ## Project Capability that may activate design-time components in an IDE.
   ## 
    
   ##     

   element ProjectCapability { text }

start |= NativeReference

NativeReference = 
   ## Reference to a native manifest file, or to a file that contains a native manifest
   ##         

   element NativeReference
   {
      SimpleItemType,
      (
         ## Base name of manifest file
         ##                                 

         element Name { text }
       | ## Relative path to manifest file
         ##                                 

         element HintPath { text }
      ),
      attribute Include
      {
         ## Reference full name
         ##                         

         xsd:string
      }?
   }

start |= ProjectReference

ProjectReference = 
   ## Reference to another project
   ##         

   element ProjectReference
   {
      SimpleItemType,
      (
         ## Friendly display name (optional)
         ##                                 

         element Name { text }
       | ## Project GUID, in the form {00000000-0000-0000-0000-000000000000}
         ##                                 

         element Project { text }
       | element ReferenceOutputAssembly
         {
            boolean
            >>
            a:documentation
            [
               """Boolean specifying whether the outputs of the project referenced should be passed to the compiler. Default is true.
                                """
            ]
         }
       | ## Whether the exact version of the assembly should be used.
         ##                                 

         element SpecificVersion { text }
       | ## Semicolon separated list of targets in the referenced projects that should be built. Default is the value of $(ProjectReferenceBuildTargets) whose default is blank, indicating the default targets.
         ##                                 

         element Targets { text }
       | ## Item type to emit target outputs into. Default is blank. If the Reference metadata is set to "true" (default) then target outputs will become references for the compiler.
         ## 
                              
         ##                               

         element OutputItemType { text }
       | element Package { text }
       | element EmbedInteropTypes
         {
            boolean
            >>
            a:documentation
            [
               """Whether the types in this reference need to embedded into the target assembly - interop assemblies only (optional, boolean)
                                """
            ]
         }
       | ## Assets to include from this reference
         ## 
                              
         ##                               

         element IncludeAssets { text }
       | ## Assets to exclude from this reference
         ## 
                              
         ##                               

         element ExcludeAssets { text }
       | ## Assets that are private in this reference
         ## 
                              
         ##                               

         element PrivateAssets { text }
      ),
      attribute Include
      {
         ## Path to project file
         ##                         

         xsd:string
      }?
   }

start |= Compile

Compile = 
   ## Source files for compiler
   ##         

   element Compile
   {
      SimpleItemType,
      (
         element SubType { text }
       | element DependentUpon { text }
       | element AutoGen
         {
            boolean
            >>
            a:documentation
            [
               """Whether file was generated from another file (boolean)
                                """
            ]
         }
       | element DesignTime { text }
       | ## Notional path within project to display if the file is physically located outside of the project file's cone (optional)
         ##                                 

         element Link { text }
       | element DesignTimeSharedInput { text }
       | element Visible
         {
            boolean
            >>
            a:documentation
            [
               """Display in user interface (optional, boolean)
                                """
            ]
         }
       | element CopyToOutputDirectory { text }
       | element VBMyExtensionTemplateID { text }
      ),
      attribute Include
      {
         ## Semi-colon separated list of source files (wildcards are allowed)
         ##                         

         xsd:string
      }?
   }

start |= EmbeddedResource

EmbeddedResource = 
   ## Resources to be embedded in the generated assembly
   ##         

   element EmbeddedResource
   {
      SimpleItemType,
      (
         element DependentUpon { text }
       | ## Name of any file generator that is run on this item
         ##                                 

         element Generator { text }
       | ## File that was created by any file generator that was run on this item
         ##                                 

         element LastGenOutput { text }
       | ## Namespace into which any file generator that is run on this item should create code
         ##                                 

         element CustomToolNamespace { text }
       | ## Notional path within project to display if the file is physically located outside of the project file's cone (optional)
         ##                                 

         element Link { text }
       | element Visible
         {
            boolean
            >>
            a:documentation
            [
               """Display in user interface (optional, boolean)
                                """
            ]
         }
       | element SubType { text }
       | element CopyToOutputDirectory { text }
       | element LogicalName { text }
      ),
      attribute Include
      {
         ## Semi-colon separated list of resource files (wildcards are allowed)
         ##                         

         xsd:string
      }?
   }

start |= Content

Content = 
   ## Files that are not compiled, but may be embedded or published
   ##         

   element Content
   {
      SimpleItemType,
      (
         element DependentUpon { text }
       | ## Name of any file generator that is run on this item
         ##                                 

         element Generator { text }
       | element LastGenOutput { text }
       | element CustomToolNamespace { text }
       | ## Notional path within project to display if the file is physically located outside of the project file's cone (optional)
         ##                                 

         element Link { text }
       | element Group { text }
       | ## Default, Included, Excluded, DataFile, or Prerequisite
         ##                                 

         element PublishState { text }
       | element IsAssembly { text }
       | element Visible
         {
            boolean
            >>
            a:documentation
            [
               """Display in user interface (optional, boolean)
                                """
            ]
         }
       | element SubType { text }
       | element CopyToOutputDirectory
         {
            boolean
            >>
            a:documentation
            [
               """Copy file to output directory (optional, boolean, default false)
                                """
            ]
         }
       | element CopyToPublishDirectory
         {
            boolean
            >>
            a:documentation
            [
               """Copy file to publish directory (optional, boolean, default false)
                                """
            ]
         }
      ),
      attribute Include
      {
         ## Semi-colon separated list of content files (wildcards are allowed)
         ##                         

         xsd:string
      }?
   }

start |= Page

Page = 
   ## XAML files that are converted to binary and compiled into the assembly
   ##         

   element Page
   {
      SimpleItemType,
      (
         element DependentUpon { text }
       | ## Name of any file generator that is run on this item
         ##                                 

         element Generator { text }
       | element LastGenOutput { text }
       | element CustomToolNamespace { text }
       | ## Notional path within project to display if the file is physically located outside of the project file's cone (optional)
         ##                                 

         element Link { text }
       | element Group { text }
       | element SubType { text }
       | element CopyToOutputDirectory
         {
            boolean
            >>
            a:documentation
            [
               """Copy file to output directory (optional, boolean, default false)
                                """
            ]
         }
      ),
      attribute Include
      {
         ## Semi-colon separated list of XAML files (wildcards are allowed)
         ##                         

         xsd:string
      }?
   }

start |= Resource

Resource = 
   ## File that is compiled into the assembly
   ##         

   element Resource
   {
      SimpleItemType,
      (
         element DependentUpon { text }
       | ## Name of any file generator that is run on this item
         ##                                 

         element Generator { text }
       | element LastGenOutput { text }
       | element CustomToolNamespace { text }
       | ## Notional path within project to display if the file is physically located outside of the project file's cone (optional)
         ##                                 

         element Link { text }
       | element Group { text }
       | element SubType { text }
       | element CopyToOutputDirectory
         {
            boolean
            >>
            a:documentation
            [
               """Copy file to output directory (optional, boolean, default false)
                                """
            ]
         }
      ),
      attribute Include
      {
         ## Semi-colon separated list of files (wildcards are allowed)
         ##                         

         xsd:string
      }?
   }

start |= ApplicationDefinition

ApplicationDefinition = 
   ## XAML file that contains the application definition, only one can be defined
   ##         

   element ApplicationDefinition
   {
      SimpleItemType,
      (
         element DependentUpon { text }
       | ## Name of any file generator that is run on this item
         ##                                 

         element Generator { text }
       | element LastGenOutput { text }
       | element CustomToolNamespace { text }
       | ## Notional path within project to display if the file is physically located outside of the project file's cone (optional)
         ##                                 

         element Link { text }
       | element Group { text }
       | element SubType { text }
       | element CopyToOutputDirectory
         {
            boolean
            >>
            a:documentation
            [
               """Copy file to output directory (optional, boolean, default false)
                                """
            ]
         }
      )
   }

start |= None

None = 
   ## Files that should have no role in the build process
   ##         

   element None
   {
      SimpleItemType,
      (
         element DependentUpon { text }
       | ## Name of any file generator that is run on this item
         ##                                 

         element Generator { text }
       | element LastGenOutput { text }
       | element CustomToolNamespace { text }
       | ## Notional path within project to display if the file is physically located outside of the project file's cone (optional)
         ##                                 

         element Link { text }
       | element Visible
         {
            boolean
            >>
            a:documentation
            [
               """Display in user interface (optional, boolean)
                                """
            ]
         }
       | element CopyToOutputDirectory { text }
      )
   }

start |= BaseApplicationManifest

BaseApplicationManifest = 
   element BaseApplicationManifest
   {
      SimpleItemType
      >>
      a:documentation
      [
         """The base application manifest for the build. Contains ClickOnce security information.
        """
      ]
   }

start |= Folder

Folder = 
   element Folder
   {
      SimpleItemType
      >>
      a:documentation [ """Folder on disk """ ]
   }

start |= Import

Import = 
   element Import
   {
      SimpleItemType
      >>
      a:documentation
      [
         """Assemblies whose namespaces should be imported by the Visual Basic compiler
        """
      ]
   }

start |= Service

Service = element Service { SimpleItemType }

start |= WebReferences

WebReferences = 
   element WebReferences
   {
      SimpleItemType
      >>
      a:documentation
      [
         """Name of Web References folder to display in user interface
        """
      ]
   }

start |= WebReferenceUrl

WebReferenceUrl = 
   ## Represents a reference to a web service
   ##         

   element WebReferenceUrl
   {
      SimpleItemType,
      (
         element UrlBehavior { text }
       | element RelPath { text }
       | element UpdateFromURL { text }
       | element ServiceLocationURL { text }
       | element CachedDynamicPropName { text }
       | element CachedAppSettingsObjectName { text }
       | element CachedSettingsPropName { text }
      ),
      attribute Include
      {
         ## URL to web service
         ##                             

         xsd:string
      }?
   }

start |= FileAssociation

FileAssociation = 
   element FileAssociation
   {
      SimpleItemType,
      (
         element Visible
         {
            boolean
            >>
            a:documentation
            [
               """Display in user interface (optional, boolean)
                                """
            ]
         }
       | element DefaultIcon { text }
       | element Description { text }
       | element Progid { text }
      )
   }

start |= BootstrapperFile

BootstrapperFile = 
   element BootstrapperFile
   {
      SimpleItemType,
      (
         element Visible
         {
            boolean
            >>
            a:documentation
            [
               """Display in user interface (optional, boolean)
                                """
            ]
         }
       | element ProductName { text }
       | element Install { text }
      )
   }

start |= PublishFile

PublishFile = 
   element PublishFile
   {
      SimpleItemType,
      (
         element Visible
         {
            boolean
            >>
            a:documentation
            [
               """Display in user interface (optional, boolean)
                                """
            ]
         }
       | element Group { text }
       | element IncludeHash
         {
            boolean
            >>
            a:documentation [ """(boolean) """ ]
         }
       | element IsAssembly
         {
            boolean
            >>
            a:documentation [ """(boolean) """ ]
         }
       | ## Default, Included, Excluded, DataFile, ManifestEntryPoint, or Prerequisite
         ##                                 

         element PublishState { text }
      )
   }

start |= TargetPlatform

TargetPlatform = 
   ## Target platform in the form of "[Identifier], Version=[Version]", for example, "Windows, Version=8.0"
   ## 
        
   ##         

   element TargetPlatform { text }

start |= Analyzer

Analyzer = 
   ## An assembly containing diagnostic analyzers
   ## 
        
   ##         

   element Analyzer
   {
      SimpleItemType,
      attribute Include
      {
         ## Relative or absolute path to the assembly (required)
         ## 
                        
         ##                         

         xsd:string
      }
   }

start |= AndroidResource

AndroidResource = 
   ## Android resource files to be used within a Xamarin.Android project.
   ##         

   element AndroidResource { text }

start |= ProguardConfiguration

ProguardConfiguration = 
   ## ProGuard configuration files to be used within a Xamarin.Android project.
   ##         

   element ProguardConfiguration { text }

start |= VisualStudioVersion

VisualStudioVersion = element VisualStudioVersion { StringPropertyType }

start |= MinimumVisualStudioVersion

MinimumVisualStudioVersion = 
   element MinimumVisualStudioVersion { StringPropertyType }

start |= AdditionalFileItemNames

AdditionalFileItemNames = 
   element AdditionalFileItemNames { StringPropertyType }

start |= AllowUnsafeBlocks

AllowUnsafeBlocks = element AllowUnsafeBlocks { StringPropertyType }

start |= AnalysisMode

AnalysisMode = 
   ## Customizes the set of rules that are enabled by default.
   ##       

   element AnalysisMode
   {
      "Default" | "AllEnabledByDefault" | "AllDisabledByDefault"
   }

start |= AppConfigForCompiler

AppConfigForCompiler = element AppConfigForCompiler { StringPropertyType }

start |= ApplicationIcon

ApplicationIcon = element ApplicationIcon { StringPropertyType }

start |= ApplicationRevision

ApplicationRevision = 
   element ApplicationRevision
   {
      StringPropertyType
      >>
      a:documentation [ """integer """ ]
   }

start |= ApplicationVersion

ApplicationVersion = 
   element ApplicationVersion
   {
      StringPropertyType
      >>
      a:documentation [ """Matches the expression "\d\.\d\.\d\.(\d|\*)" """ ]
   }

start |= AppDesignerFolder

AppDesignerFolder = 
   element AppDesignerFolder
   {
      StringPropertyType
      >>
      a:documentation [ """Name of folder for Application Designer """ ]
   }

start |= AspNetConfiguration

AspNetConfiguration = element AspNetConfiguration { StringPropertyType }

start |= AspNetCoreHostingModel

AspNetCoreHostingModel = 
   element AspNetCoreHostingModel
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Indicates whether to run an ASP.NET Core application using IIS in-process or out-of-process.
        """
      ]
   }

start |= AspNetCoreModuleName

AspNetCoreModuleName = 
   element AspNetCoreModuleName
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Indicates which AspNetCoreModule version to use. Versions include V1 and V2.
        """
      ]
   }

start |= AssemblyKeyContainerName

AssemblyKeyContainerName = 
   element AssemblyKeyContainerName { StringPropertyType }

start |= AssemblyKeyProviderName

AssemblyKeyProviderName = 
   element AssemblyKeyProviderName { StringPropertyType }

start |= AssemblyName

AssemblyName = 
   element AssemblyName
   {
      StringPropertyType
      >>
      a:documentation [ """Name of output assembly """ ]
   }

start |= AssemblyOriginatorKeyFile

AssemblyOriginatorKeyFile = 
   element AssemblyOriginatorKeyFile { StringPropertyType }

start |= AssemblyOriginatorKeyFileType

AssemblyOriginatorKeyFileType = 
   element AssemblyOriginatorKeyFileType { StringPropertyType }

start |= AssemblyOriginatorKeyMode

AssemblyOriginatorKeyMode = 
   element AssemblyOriginatorKeyMode { StringPropertyType }

start |= AssemblyType

AssemblyType = element AssemblyType { StringPropertyType }

start |= AutoGenerateBindingRedirects

AutoGenerateBindingRedirects = 
   element AutoGenerateBindingRedirects
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Indicates whether BindingRedirect elements should be automatically generated for referenced assemblies.
        """
      ]
   }

start |= AutorunEnabled

AutorunEnabled = 
   element AutorunEnabled
   {
      boolean
      >>
      a:documentation [ """boolean """ ]
   }

start |= BaseAddress

BaseAddress = element BaseAddress { StringPropertyType }

start |= BootstrapperComponentsLocation

BootstrapperComponentsLocation = 
   element BootstrapperComponentsLocation
   {
      StringPropertyType
      >>
      a:documentation [ """HomeSite, Relative, or Absolute """ ]
   }

start |= BootstrapperComponentsUrl

BootstrapperComponentsUrl = 
   element BootstrapperComponentsUrl { StringPropertyType }

start |= BootstrapperEnabled

BootstrapperEnabled = 
   element BootstrapperEnabled
   {
      boolean
      >>
      a:documentation [ """boolean """ ]
   }

start |= CharacterSet

CharacterSet = element CharacterSet { StringPropertyType }

start |= CheckForOverflowUnderflow

CheckForOverflowUnderflow = 
   element CheckForOverflowUnderflow { StringPropertyType }

start |= CLRSupport

CLRSupport = element CLRSupport { StringPropertyType }

start |= UseDebugLibraries

UseDebugLibraries = element UseDebugLibraries { boolean }

start |= CodePage

CodePage = element CodePage { StringPropertyType }

start |= Configuration

Configuration = element Configuration { StringPropertyType }

start |= ConfigurationName

ConfigurationName = element ConfigurationName { StringPropertyType }

start |= ConfigurationOverrideFile

ConfigurationOverrideFile = 
   element ConfigurationOverrideFile { StringPropertyType }

start |= CreateDesktopShortcut

CreateDesktopShortcut = element CreateDesktopShortcut { boolean }

start |= CreateWebPageOnPublish

CreateWebPageOnPublish = 
   element CreateWebPageOnPublish
   {
      boolean
      >>
      a:documentation [ """boolean """ ]
   }

start |= CurrentSolutionConfigurationContents

CurrentSolutionConfigurationContents = 
   element CurrentSolutionConfigurationContents { GenericPropertyType }

start |= DebugSecurityZoneURL

DebugSecurityZoneURL = element DebugSecurityZoneURL { StringPropertyType }

start |= DebugSymbols

DebugSymbols = 
   element DebugSymbols
   {
      boolean
      >>
      a:documentation [ """Whether to emit symbols (boolean) """ ]
   }

start |= DebugType

DebugType = 
   element DebugType
   {
      StringPropertyType
      >>
      a:documentation [ """none, pdbonly, or full """ ]
   }

start |= DefaultClientScript

DefaultClientScript = element DefaultClientScript { StringPropertyType }

start |= DefaultHTMLPageLayout

DefaultHTMLPageLayout = element DefaultHTMLPageLayout { StringPropertyType }

start |= DefaultTargetSchema

DefaultTargetSchema = element DefaultTargetSchema { StringPropertyType }

start |= DefineConstants

DefineConstants = element DefineConstants { StringPropertyType }

start |= DefineDebug

DefineDebug = 
   element DefineDebug
   {
      boolean
      >>
      a:documentation [ """Whether DEBUG is defined (boolean) """ ]
   }

start |= DefineTrace

DefineTrace = 
   element DefineTrace
   {
      boolean
      >>
      a:documentation [ """Whether TRACE is defined (boolean) """ ]
   }

start |= DelaySign

DelaySign = element DelaySign { StringPropertyType }

start |= DisableLangXtns

DisableLangXtns = element DisableLangXtns { StringPropertyType }

start |= DisallowUrlActivation

DisallowUrlActivation = 
   element DisallowUrlActivation
   {
      boolean
      >>
      a:documentation [ """boolean """ ]
   }

start |= CodeAnalysisAdditionalOptions

CodeAnalysisAdditionalOptions = 
   element CodeAnalysisAdditionalOptions
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Additional options to pass to the Code Analysis command line tool.
        """
      ]
   }

start |= CodeAnalysisApplyLogFileXsl

CodeAnalysisApplyLogFileXsl = 
   element CodeAnalysisApplyLogFileXsl
   {
      boolean
      >>
      a:documentation
      [
         """Indicates whether to apply the XSL style sheet specified in $(CodeAnalysisLogFileXsl) to the Code Analysis report. This report is specified in $(CodeAnalysisLogFile). The default is false.
        """
      ]
   }

start |= CodeAnalysisConsoleXsl

CodeAnalysisConsoleXsl = 
   element CodeAnalysisConsoleXsl
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Path to the XSL style sheet that will be applied to the Code Analysis console output. The default is an empty string (''), which causes Code Analysis to use its default console output.
        """
      ]
   }

start |= CodeAnalysisCulture

CodeAnalysisCulture = 
   element CodeAnalysisCulture
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Culture to use for Code Analysis spelling rules, for example, 'en-US' or 'en-AU'. The default is the current user interface language for Windows.
        """
      ]
   }

start |= CodeAnalysisDependentAssemblyPaths

CodeAnalysisDependentAssemblyPaths = 
   ## Additional reference assembly paths to pass to the Code Analysis command line tool.
   ##         

   element CodeAnalysisDependentAssemblyPaths
   {
      SimpleItemType,
      attribute Include
      {
         ## A fully qualified path to a directory containing reference assemblies to be used by Code Analysis.
         ##                         

         xsd:string
      }
   }

start |= CodeAnalysisDictionary

CodeAnalysisDictionary = 
   ## Code Analysis custom dictionaries.
   ##         

   element CodeAnalysisDictionary
   {
      SimpleItemType,
      attribute Include
      {
         ## Semicolon-separated list of Code Analysis custom dictionaries. Wildcards are allowed.
         ##                         

         xsd:string
      }
   }

start |= CodeAnalysisFailOnMissingRules

CodeAnalysisFailOnMissingRules = 
   element CodeAnalysisFailOnMissingRules
   {
      boolean
      >>
      a:documentation
      [
         """Indicates whether Code Analysis should fail if a rule or rule set is missing. The default is false.
        """
      ]
   }

start |= CodeAnalysisForceOutput

CodeAnalysisForceOutput = 
   element CodeAnalysisForceOutput
   {
      boolean
      >>
      a:documentation
      [
         """Indicates whether Code Analysis generates a report file, even when there are no active warnings or errors. The default is true.
        """
      ]
   }

start |= CodeAnalysisGenerateSuccessFile

CodeAnalysisGenerateSuccessFile = 
   element CodeAnalysisGenerateSuccessFile
   {
      boolean
      >>
      a:documentation
      [
         """Indicates whether Code Analysis generates a '$(CodeAnalysisInputAssembly).lastcodeanalysissucceeded' file in the output folder when no build-breaking errors occur. The default is true.
        """
      ]
   }

start |= CodeAnalysisIgnoreBuiltInRules

CodeAnalysisIgnoreBuiltInRules = 
   element CodeAnalysisIgnoreBuiltInRules
   {
      boolean
      >>
      a:documentation
      [
         """Indicates whether Code Analysis will ignore the default rule directories when searching for rules. The default is false.
        """
      ]
   }

start |= CodeAnalysisIgnoreBuiltInRuleSets

CodeAnalysisIgnoreBuiltInRuleSets = 
   element CodeAnalysisIgnoreBuiltInRuleSets
   {
      boolean
      >>
      a:documentation
      [
         """Indicates whether Code Analysis will ignore the default rule set directories when searching for rule sets. The default is false.
        """
      ]
   }

start |= CodeAnalysisIgnoreInvalidTargets

CodeAnalysisIgnoreInvalidTargets = 
   element CodeAnalysisIgnoreInvalidTargets
   {
      boolean
      >>
      a:documentation
      [
         """Indicates whether Code Analysis should silently fail when analyzing invalid assemblies, such as those without managed code. The default is true.
        """
      ]
   }

start |= CodeAnalysisIgnoreGeneratedCode

CodeAnalysisIgnoreGeneratedCode = 
   element CodeAnalysisIgnoreGeneratedCode
   {
      boolean
      >>
      a:documentation
      [
         """Indicates whether Code Analysis should fail silently when it analyzes invalid assemblies, such as those without managed code. The default is true.
        """
      ]
   }

start |= CodeAnalysisImport

CodeAnalysisImport = 
   ## Code Analysis projects (*.fxcop) or reports to import.
   ##         

   element CodeAnalysisImport
   {
      SimpleItemType,
      attribute Include
      {
         ## Semicolon-separated list of Code Analysis projects (*.fxcop) or reports to import. Wildcards are allowed.
         ##                         

         xsd:string
      }
   }

start |= CodeAnalysisInputAssembly

CodeAnalysisInputAssembly = 
   element CodeAnalysisInputAssembly
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Path to the assembly to be analyzed by Code Analysis. The default is '$(OutDir)$(TargetName)$(TargetExt)'.
        """
      ]
   }

start |= CodeAnalysisLogFile

CodeAnalysisLogFile = 
   element CodeAnalysisLogFile
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Path to the output file for the Code Analysis report. The default is '$(CodeAnalysisInputAssembly).CodeAnalysisLog.xml'.
        """
      ]
   }

start |= CodeAnalysisLogFileXsl

CodeAnalysisLogFileXsl = 
   element CodeAnalysisLogFileXsl
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Path to the XSL style sheet to reference in the Code Analysis output report. This report is specified in $(CodeAnalysisLogFile). The default is an empty string ('').
        """
      ]
   }

start |= CodeAnalysisModuleSuppressionsFile

CodeAnalysisModuleSuppressionsFile = 
   element CodeAnalysisModuleSuppressionsFile
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Name of the file, without the path, where Code Analysis project-level suppressions are stored. The default is 'GlobalSuppressions$(DefaultLanguageSourceExtension)'.
        """
      ]
   }

start |= CodeAnalysisOverrideRuleVisibilities

CodeAnalysisOverrideRuleVisibilities = 
   element CodeAnalysisOverrideRuleVisibilities
   {
      boolean
      >>
      a:documentation
      [
         """Indicates whether to run all overridable Code Analysis rules against all targets. This will cause specific rules, such as those within the Design and Naming categories, to run against both public and internal APIs, instead of only public APIs. The default is false.
        """
      ]
   }

start |= CodeAnalysisOutputToConsole

CodeAnalysisOutputToConsole = 
   element CodeAnalysisOutputToConsole
   {
      boolean
      >>
      a:documentation
      [
         """Indicates whether to output Code Analysis warnings and errors to the console. The default is false.
        """
      ]
   }

start |= CodeAnalysisVerbose

CodeAnalysisVerbose = 
   element CodeAnalysisVerbose
   {
      boolean
      >>
      a:documentation
      [
         """Indicates whether to output verbose Code Analysis diagnostic info to the console. The default is false.
        """
      ]
   }

start |= CodeAnalysisPath

CodeAnalysisPath = 
   element CodeAnalysisPath
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Path to the Code Analysis installation folder. The default is '$(VSINSTALLDIR)\Team Tools\Static Analysis Tools\FxCop'.
        """
      ]
   }

start |= CodeAnalysisPlatformPath

CodeAnalysisPlatformPath = 
   element CodeAnalysisPlatformPath
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Path to the .NET Framework folder that contains platform assemblies, such as mscorlib.dll and System.dll. The default is an empty string ('').
        """
      ]
   }

start |= CodeAnalysisProject

CodeAnalysisProject = 
   element CodeAnalysisProject
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Path to the Code Analysis project (*.fxcop) to load. The default is an empty string ('').
        """
      ]
   }

start |= CodeAnalysisQuiet

CodeAnalysisQuiet = 
   element CodeAnalysisQuiet
   {
      boolean
      >>
      a:documentation
      [
         """Indicates whether to suppress all Code Analysis console output other than errors and warnings. This applies when $(CodeAnalysisOutputToConsole) is true. The default is false.
        """
      ]
   }

start |= CodeAnalysisRuleAssemblies

CodeAnalysisRuleAssemblies = 
   element CodeAnalysisRuleAssemblies
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Semicolon-separated list of paths either to Code Analysis rule assemblies or to folders that contain Code Analysis rule assemblies. The paths are in the form '[+|-][!][file|folder]', where '+' enables all rules in rule assembly, '-' disables all rules in rule assembly, and '!' causes all rules in rule assembly to be treated as errors. For example '+D:\Projects\Rules\NamingRules.dll;+!D:\Projects\Rules\SecurityRules.dll'. The default is '$(CodeAnalysisPath)\Rules'.
        """
      ]
   }

start |= CodeAnalysisRuleDirectories

CodeAnalysisRuleDirectories = 
   element CodeAnalysisRuleDirectories
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Semicolon-separated list of directories in which to search for rules when resolving a rule set. The default is '$(CodeAnalysisPath)\Rules' unless the CodeAnalysisIgnoreBuiltInRules property is set to true.
        """
      ]
   }

start |= CodeAnalysisRules

CodeAnalysisRules = 
   element CodeAnalysisRules
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Semicolon-separated list of Code Analysis rules. The rules are in the form '[+|-][!]Category#CheckId', where '+' enables the rule, '-' disables the rule, and '!' causes the rule to be treated as an error. For example, '-Microsoft.Naming#CA1700;+!Microsoft.Naming#CA1701'. The default is an empty string ('') which enables all rules.
        """
      ]
   }

start |= CodeAnalysisRuleSet

CodeAnalysisRuleSet = 
   element CodeAnalysisRuleSet
   {
      StringPropertyType
      >>
      a:documentation
      [
         """A .ruleset file which contains a list of rules to run during analysis. The string can be a full path, a path relative to the project file, or a file name. If a file name is specified, the CodeAnalysisRuleSetDirectories property will be searched to find the file. The default is an empty string ('').
        """
      ]
   }

start |= CodeAnalysisRuleSetDirectories

CodeAnalysisRuleSetDirectories = 
   element CodeAnalysisRuleSetDirectories
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Semicolon-separated list of directories in which to search for rule sets. The default is '$(VSINSTALLDIR)\Team Tools\Static Analysis Tools\Rule Sets' unless the CodeAnalysisIgnoreBuiltInRuleSets property is set to true.
        """
      ]
   }

start |= CodeAnalysisSaveMessagesToReport

CodeAnalysisSaveMessagesToReport = 
   element CodeAnalysisSaveMessagesToReport
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Comma-separated list of the type ('Active', 'Excluded', or 'Absent') of warnings and errors to save to the output report file. The default is 'Active'.
        """
      ]
   }

start |= CodeAnalysisSearchGlobalAssemblyCache

CodeAnalysisSearchGlobalAssemblyCache = 
   element CodeAnalysisSearchGlobalAssemblyCache
   {
      boolean
      >>
      a:documentation
      [
         """Indicates whether Code Analysis should search the Global Assembly Cache (GAC) for missing references that are encountered during analysis. The default is true.
        """
      ]
   }

start |= CodeAnalysisSummary

CodeAnalysisSummary = 
   element CodeAnalysisSummary
   {
      boolean
      >>
      a:documentation
      [
         """Indicates whether to output a Code Analysis summary to the console after analysis. The default is false.
        """
      ]
   }

start |= CodeAnalysisTimeout

CodeAnalysisTimeout = 
   element CodeAnalysisTimeout
   {
      StringPropertyType
      >>
      a:documentation
      [
         """The time, in seconds, that Code Analysis should wait for analysis of a single item to complete before it aborts analysis. Specify 0 to cause Code Analysis to wait indefinitely. The default is 120.
        """
      ]
   }

start |= CodeAnalysisTreatWarningsAsErrors

CodeAnalysisTreatWarningsAsErrors = 
   element CodeAnalysisTreatWarningsAsErrors
   {
      boolean
      >>
      a:documentation
      [
         """Indicates whether to treat all Code Analysis warnings as errors. The default is false.
        """
      ]
   }

start |= CodeAnalysisUpdateProject

CodeAnalysisUpdateProject = 
   element CodeAnalysisUpdateProject
   {
      boolean
      >>
      a:documentation
      [
         """Indicates whether to update the Code Analysis project (*.fxcop) specified in $(CodeAnalysisProject). This applies when there are changes during analysis. The default is false.
        """
      ]
   }

start |= CodeAnalysisUseTypeNameInSuppression

CodeAnalysisUseTypeNameInSuppression = 
   element CodeAnalysisUseTypeNameInSuppression
   {
      boolean
      >>
      a:documentation
      [
         """Indicates whether to include the name of the rule when Code Analysis emits a suppression. The default is true.
        """
      ]
   }

start |= ConfigurationType

ConfigurationType = element ConfigurationType { StringPropertyType }

start |= DeployDirSuffix

DeployDirSuffix = element DeployDirSuffix { StringPropertyType }

start |= DisableFastUpToDateCheck

DisableFastUpToDateCheck = 
   element DisableFastUpToDateCheck
   {
      boolean
      >>
      a:documentation
      [
         """Whether Visual Studio should do its own faster up-to-date check before Building, rather than invoke MSBuild to do a possibly more accurate one. You would set this to false if you have a heavily customized build process and builds in Visual Studio are not occurring when they should.
        """
      ]
   }

start |= DocumentationFile

DocumentationFile = element DocumentationFile { StringPropertyType }

start |= EnableASPDebugging

EnableASPDebugging = element EnableASPDebugging { StringPropertyType }

start |= EnableASPXDebugging

EnableASPXDebugging = element EnableASPXDebugging { StringPropertyType }

start |= EnableSQLServerDebugging

EnableSQLServerDebugging = 
   element EnableSQLServerDebugging { StringPropertyType }

start |= EnableSecurityDebugging

EnableSecurityDebugging = 
   element EnableSecurityDebugging { StringPropertyType }

start |= EnableUnmanagedDebugging

EnableUnmanagedDebugging = 
   element EnableUnmanagedDebugging { StringPropertyType }

start |= EnforceCodeStyleInBuild

EnforceCodeStyleInBuild = 
   element EnforceCodeStyleInBuild
   {
      boolean
      >>
      a:documentation
      [
         """Controls whether code style analysis rules configured as warnings or errors should execute on build and report violations. The default is false.
        """
      ]
   }

start |= ErrorLog

ErrorLog = element ErrorLog { StringPropertyType }

start |= ErrorReport

ErrorReport = element ErrorReport { StringPropertyType }

start |= EmbedManifest

EmbedManifest = element EmbedManifest { StringPropertyType }

start |= ErrorReportUrl

ErrorReportUrl = element ErrorReportUrl { StringPropertyType }

start |= ExcludeDeploymentUrl

ExcludeDeploymentUrl = element ExcludeDeploymentUrl { boolean }

start |= ExcludedPermissions

ExcludedPermissions = element ExcludedPermissions { StringPropertyType }

start |= FallbackCulture

FallbackCulture = element FallbackCulture { StringPropertyType }

start |= FileAlignment

FileAlignment = element FileAlignment { StringPropertyType }

start |= FileUpgradeFlags

FileUpgradeFlags = element FileUpgradeFlags { StringPropertyType }

start |= FormFactorID

FormFactorID = element FormFactorID { StringPropertyType }

start |= FrameworkPathOverride

FrameworkPathOverride = 
   element FrameworkPathOverride
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Sets the /sdkpath switch for a VB project to the specified value
        """
      ]
   }

start |= GenerateDocumentationFile

GenerateDocumentationFile = 
   element GenerateDocumentationFile
   {
      boolean
      >>
      a:documentation
      [
         """Value indicating whether a documentation file will be generated by the compiler
      """
      ]
   }

start |= GenerateManifests

GenerateManifests = element GenerateManifests { StringPropertyType }

start |= GenerateLibraryLayout

GenerateLibraryLayout = element GenerateLibraryLayout { boolean }

start |= GeneratePackageOnBuild

GeneratePackageOnBuild = 
   element GeneratePackageOnBuild
   {
      boolean
      >>
      a:documentation
      [
         """Value indicating whether a NuGet package will be generated when the project is built
      """
      ]
   }

start |= DisableXbfGeneration

DisableXbfGeneration = element DisableXbfGeneration { boolean }

start |= SuppressXamlWarnings

SuppressXamlWarnings = element SuppressXamlWarnings { StringPropertyType }

start |= XamlRootsLog

XamlRootsLog = element XamlRootsLog { StringPropertyType }

start |= XamlSavedStateFilePath

XamlSavedStateFilePath = element XamlSavedStateFilePath { StringPropertyType }

start |= GenerateSerializationAssemblies

GenerateSerializationAssemblies = 
   element GenerateSerializationAssemblies { StringPropertyType }

start |= HostInBrowser

HostInBrowser = element HostInBrowser { boolean }

start |= IgnoreImportLibrary

IgnoreImportLibrary = element IgnoreImportLibrary { boolean }

start |= ImplicitUsings

ImplicitUsings = 
   ## Enable implicit global usings for the C# project. Possible values are enable, true, and disable.
   ##       

   element ImplicitUsings
   {
      "enable" | "true" | "disable"
   }

start |= Install

Install = element Install { StringPropertyType }

start |= InstallFrom

InstallFrom = 
   element InstallFrom
   {
      StringPropertyType
      >>
      a:documentation [ """Web, Unc, or Disk """ ]
   }

start |= AnalysisLevel

AnalysisLevel = element AnalysisLevel { StringPropertyType }

start |= InstallUrl

InstallUrl = element InstallUrl { StringPropertyType }

start |= IsCodeSharingProject

IsCodeSharingProject = element IsCodeSharingProject { boolean }

start |= IsPackable

IsPackable = 
   element IsPackable
   {
      boolean
      >>
      a:documentation
      [
         """Indicates whether the project can be used to create a NuGet package.
        """
      ]
   }

start |= EnableNETAnalyzers

EnableNETAnalyzers = 
   element EnableNETAnalyzers
   {
      boolean
      >>
      a:documentation
      [
         """Indicates whether the .NET analyzers are enabled. They are enabled by default for projects that target .NET 5.0 or later.
        """
      ]
   }

start |= EnableDefaultCompileItems

EnableDefaultCompileItems = 
   element EnableDefaultCompileItems
   {
      boolean
      >>
      a:documentation
      [
         """Enable default Compile item globs for source files.
        """
      ]
   }

start |= EnableDefaultNoneItems

EnableDefaultNoneItems = 
   element EnableDefaultNoneItems
   {
      boolean
      >>
      a:documentation
      [
         """Enable default None item globs (which cover most files in the project not covered by other globs).
        """
      ]
   }

start |= EnableDefaultItems

EnableDefaultItems = 
   element EnableDefaultItems
   {
      boolean
      >>
      a:documentation
      [
         """Defaults to true, and if set to false will disable all default item globs.
        """
      ]
   }

start |= IsWebBootstrapper

IsWebBootstrapper = element IsWebBootstrapper { StringPropertyType }

start |= JCPA

JCPA = element JCPA { StringPropertyType }

start |= Keyword

Keyword = element Keyword { StringPropertyType }

start |= LangVersion

LangVersion = element LangVersion { StringPropertyType }

start |= VBRuntime

VBRuntime = element VBRuntime { StringPropertyType }

start |= Prefer32Bit

Prefer32Bit = element Prefer32Bit { StringPropertyType }

start |= HighEntropyVA

HighEntropyVA = element HighEntropyVA { StringPropertyType }

start |= LinkIncremental

LinkIncremental = element LinkIncremental { StringPropertyType }

start |= ManifestCertificateThumbprint

ManifestCertificateThumbprint = 
   element ManifestCertificateThumbprint { StringPropertyType }

start |= ManifestKeyFile

ManifestKeyFile = element ManifestKeyFile { StringPropertyType }

start |= MapFileExtensions

MapFileExtensions = 
   element MapFileExtensions
   {
      boolean
      >>
      a:documentation [ """boolean """ ]
   }

start |= MinimumRequiredVersion

MinimumRequiredVersion = 
   element MinimumRequiredVersion
   {
      StringPropertyType
      >>
      a:documentation [ """Matches the expression "\d\.\d\.\d\.\d" """ ]
   }

start |= MyType

MyType = element MyType { StringPropertyType }

start |= MSBuildAllProjects

MSBuildAllProjects = element MSBuildAllProjects { StringPropertyType }

start |= MSBuildTreatWarningsAsErrors

MSBuildTreatWarningsAsErrors = 
   element MSBuildTreatWarningsAsErrors
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Indicates whether to treat all warnings as errors when building a project.
        """
      ]
   }

start |= MSBuildWarningsAsMessages

MSBuildWarningsAsMessages = 
   element MSBuildWarningsAsMessages
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Indicates a semicolon delimited list of warnings to treat as low importance messages when building a project.
        """
      ]
   }

start |= MSBuildWarningsAsErrors

MSBuildWarningsAsErrors = 
   element MSBuildWarningsAsErrors
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Indicates a semicolon delimited list of warnings to treat as errors when building a project.
        """
      ]
   }

start |= NoConfig

NoConfig = element NoConfig { StringPropertyType }

start |= NoStandardLibraries

NoStandardLibraries = element NoStandardLibraries { StringPropertyType }

start |= NoStdLib

NoStdLib = 
   element NoStdLib
   {
      boolean
      >>
      a:documentation
      [
         """Whether standard libraries (such as mscorlib) should be referenced automatically (boolean)
        """
      ]
   }

start |= NoWarn

NoWarn = 
   element NoWarn
   {
      StringPropertyType
      >>
      a:documentation [ """Comma separated list of disabled warnings """ ]
   }

start |= OldToolsVersion

OldToolsVersion = element OldToolsVersion { StringPropertyType }

start |= OutDir

OutDir = element OutDir { StringPropertyType }

start |= TargetExt

TargetExt = element TargetExt { StringPropertyType }

start |= TargetName

TargetName = element TargetName { StringPropertyType }

start |= OpenBrowserOnPublish

OpenBrowserOnPublish = 
   element OpenBrowserOnPublish
   {
      boolean
      >>
      a:documentation [ """boolean """ ]
   }

start |= Optimize

Optimize = 
   element Optimize
   {
      boolean
      >>
      a:documentation [ """Should compiler optimize output (boolean) """ ]
   }

start |= OptionCompare

OptionCompare = 
   element OptionCompare
   {
      StringPropertyType
      >>
      a:documentation [ """Option Compare setting (Text or Binary) """ ]
   }

start |= OptionExplicit

OptionExplicit = 
   element OptionExplicit
   {
      StringPropertyType
      >>
      a:documentation [ """Should Option Explicit be set (On or Off) """ ]
   }

start |= OptionStrict

OptionStrict = 
   element OptionStrict
   {
      StringPropertyType
      >>
      a:documentation [ """Should Option Strict be set (On or Off) """ ]
   }

start |= OptionInfer

OptionInfer = 
   element OptionInfer
   {
      StringPropertyType
      >>
      a:documentation [ """Should Option Infer be set (On or Off) """ ]
   }

start |= OSVersion

OSVersion = element OSVersion { StringPropertyType }

start |= OutputPath

OutputPath = 
   element OutputPath
   {
      StringPropertyType
      >>
      a:documentation [ """Path to output folder, with trailing slash """ ]
   }

start |= OutputType

OutputType = 
   element OutputType
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Type of output to generate (WinExe, Exe, or Library)
        """
      ]
   }

start |= PackageOutputPath

PackageOutputPath = 
   ## Path to the output folder for the package generated when calling Pack.
   ##       

   element PackageOutputPath { text }

start |= PackageTargetFallback

PackageTargetFallback = 
   ## Allows packages using alternative monikers to be referenced in this project, which include older (e.g. dnxcore50, dotnet5.x) and Portable Class Library names.
   ##       

   element PackageTargetFallback { text }

start |= PackAsTool

PackAsTool = 
   element PackAsTool
   {
      boolean
      >>
      a:documentation
      [
         """Indicate whether the NuGet package should be configured as a .NET tool suitable for use with "dotnet tool install".
      """
      ]
   }

start |= AssetTargetFallback

AssetTargetFallback = 
   element AssetTargetFallback
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Can be set to one or more target framework monikers. When determining package compatibility, if the package does not have compatible assets for the project's real target framework, compatibility will be rechecked using each target framework from the AssetTargetFramework project of the referencing project.
      """
      ]
   }

start |= Nullable

Nullable = 
   ## Set the nullable annotations and warnings context for the C# project. Possible values are enable, disable, warnings and annotations.
   ##       

   element Nullable
   {
      "enable" | "disable" | "warnings" | "annotations"
   }

start |= Platform

Platform = element Platform { StringPropertyType }

start |= PlatformName

PlatformName = element PlatformName { StringPropertyType }

start |= PlatformFamilyName

PlatformFamilyName = element PlatformFamilyName { StringPropertyType }

start |= PlatformID

PlatformID = element PlatformID { StringPropertyType }

start |= PlatformTarget

PlatformTarget = element PlatformTarget { StringPropertyType }

start |= PlatformToolset

PlatformToolset = element PlatformToolset { StringPropertyType }

start |= PostBuildEvent

PostBuildEvent = 
   element PostBuildEvent
   {
      StringPropertyType
      >>
      a:documentation [ """Command line to be run at the end of build """ ]
   }

start |= PreBuildEvent

PreBuildEvent = 
   element PreBuildEvent
   {
      StringPropertyType
      >>
      a:documentation [ """Command line to be run at the start of build """ ]
   }

start |= PreserveCompilationContext

PreserveCompilationContext = 
   element PreserveCompilationContext
   {
      boolean
      >>
      a:documentation
      [
         """Value indicating whether reference assemblies can be used in dynamic compilation
      """
      ]
   }

start |= ProduceReferenceAssemblies

ProduceReferenceAssemblies = element ProduceReferenceAssemblies { boolean }

start |= ProductName

ProductName = element ProductName { StringPropertyType }

start |= ProductVersion

ProductVersion = element ProductVersion { StringPropertyType }

start |= ProjectGuid

ProjectGuid = element ProjectGuid { StringPropertyType }

start |= ProjectType

ProjectType = element ProjectType { StringPropertyType }

start |= ProjectTypeGuids

ProjectTypeGuids = element ProjectTypeGuids { StringPropertyType }

start |= PublisherName

PublisherName = element PublisherName { StringPropertyType }

start |= PublishUrl

PublishUrl = element PublishUrl { StringPropertyType }

start |= RecursePath

RecursePath = element RecursePath { StringPropertyType }

start |= ReferencePath

ReferencePath = 
   element ReferencePath
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Semi-colon separated list of folders to search during reference resolution
        """
      ]
   }

start |= RegisterForComInterop

RegisterForComInterop = element RegisterForComInterop { StringPropertyType }

start |= RemoteDebugEnabled

RemoteDebugEnabled = element RemoteDebugEnabled { StringPropertyType }

start |= RemoteDebugMachine

RemoteDebugMachine = element RemoteDebugMachine { StringPropertyType }

start |= RemoveIntegerChecks

RemoveIntegerChecks = element RemoveIntegerChecks { StringPropertyType }

start |= ReportAnalyzer

ReportAnalyzer = element ReportAnalyzer { StringPropertyType }

start |= RepositoryType

RepositoryType = 
   element RepositoryType
   {
      StringPropertyType
      >>
      a:documentation
      [
         """The type of the repository where the project is stored (e.g. git)
      """
      ]
   }

start |= RepositoryUrl

RepositoryUrl = 
   element RepositoryUrl
   {
      StringPropertyType
      >>
      a:documentation
      [
         """The URL for the repository where the project is stored
      """
      ]
   }

start |= ResponseFile

ResponseFile = element ResponseFile { StringPropertyType }

start |= RunAnalyzers

RunAnalyzers = 
   element RunAnalyzers
   {
      boolean
      >>
      a:documentation
      [
         """Disables analyzers at both build and design time. This property takes precedence over RunAnalyzersDuringBuild and RunAnalyzersDuringLiveAnalysis. Default is true.
        """
      ]
   }

start |= RunAnalyzersDuringBuild

RunAnalyzersDuringBuild = 
   element RunAnalyzersDuringBuild
   {
      boolean
      >>
      a:documentation
      [
         """Controls whether analyzers run at build time. Default is true.
        """
      ]
   }

start |= RunAnalyzersDuringLiveAnalysis

RunAnalyzersDuringLiveAnalysis = 
   element RunAnalyzersDuringLiveAnalysis
   {
      boolean
      >>
      a:documentation
      [
         """Controls whether analyzers analyze code live at design time. Default is true.
        """
      ]
   }

start |= RootNamespace

RootNamespace = element RootNamespace { StringPropertyType }

start |= RuntimeIdentifier

RuntimeIdentifier = 
   element RuntimeIdentifier
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Runtime identifier supported by the project (e.g. win10-x64)
      """
      ]
   }

start |= RuntimeIdentifiers

RuntimeIdentifiers = 
   element RuntimeIdentifiers
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Semi-colon separated list of runtime identifiers supported by the project (e.g. win10-x64;osx.10.11-x64;ubuntu.16.04-x64)
      """
      ]
   }

start |= SccProjectName

SccProjectName = element SccProjectName { StringPropertyType }

start |= SccLocalPath

SccLocalPath = element SccLocalPath { StringPropertyType }

start |= SccProvider

SccProvider = element SccProvider { StringPropertyType }

start |= RunCodeAnalysis

RunCodeAnalysis = 
   element RunCodeAnalysis
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Indicates whether to run Code Analysis during the build.
        """
      ]
   }

start |= RunPostBuildEvent

RunPostBuildEvent = element RunPostBuildEvent { StringPropertyType }

start |= SchemaVersion

SchemaVersion = element SchemaVersion { StringPropertyType }

start |= SecureScoping

SecureScoping = element SecureScoping { StringPropertyType }

start |= SignAssembly

SignAssembly = element SignAssembly { StringPropertyType }

start |= SignManifests

SignManifests = element SignManifests { StringPropertyType }

start |= SolutionDir

SolutionDir = element SolutionDir { StringPropertyType }

start |= SolutionExt

SolutionExt = element SolutionExt { StringPropertyType }

start |= SolutionFileName

SolutionFileName = element SolutionFileName { StringPropertyType }

start |= SolutionName

SolutionName = element SolutionName { StringPropertyType }

start |= SolutionPath

SolutionPath = element SolutionPath { StringPropertyType }

start |= StartAction

StartAction = element StartAction { StringPropertyType }

start |= StartArguments

StartArguments = element StartArguments { StringPropertyType }

start |= StartPage

StartPage = element StartPage { StringPropertyType }

start |= StartProgram

StartProgram = element StartProgram { StringPropertyType }

start |= StartURL

StartURL = element StartURL { StringPropertyType }

start |= StartWithIE

StartWithIE = element StartWithIE { StringPropertyType }

start |= StartWorkingDirectory

StartWorkingDirectory = element StartWorkingDirectory { StringPropertyType }

start |= StartupObject

StartupObject = 
   element StartupObject
   {
      StringPropertyType
      >>
      a:documentation [ """Type that contains the main entry point """ ]
   }

start |= SuiteName

SuiteName = element SuiteName { StringPropertyType }

start |= SupportUrl

SupportUrl = element SupportUrl { StringPropertyType }

start |= TargetFrameworkProfile

TargetFrameworkProfile = element TargetFrameworkProfile { StringPropertyType }

start |= TargetCulture

TargetCulture = element TargetCulture { StringPropertyType }

start |= TargetFramework

TargetFramework = 
   element TargetFramework
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Framework that this project targets. Must be a Target Framework Moniker (e.g. netcoreapp1.0)
      """
      ]
   }

start |= TargetFrameworks

TargetFrameworks = 
   element TargetFrameworks
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Semi-colon separated list of frameworks that this project targets. Must be a Target Framework Moniker (e.g. netcoreapp1.0;net461)
      """
      ]
   }

start |= TargetFrameworkVersion

TargetFrameworkVersion = element TargetFrameworkVersion { StringPropertyType }

start |= TargetPlatformIdentifier

TargetPlatformIdentifier = 
   element TargetPlatformIdentifier { StringPropertyType }

start |= TargetPlatformVersion

TargetPlatformVersion = element TargetPlatformVersion { StringPropertyType }

start |= TargetPlatformMinVersion

TargetPlatformMinVersion = 
   element TargetPlatformMinVersion { StringPropertyType }

start |= TargetZone

TargetZone = element TargetZone { StringPropertyType }

start |= ToolCommandName

ToolCommandName = 
   element ToolCommandName
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Specifies the command that will invoke the tool after it's installed.
      """
      ]
   }

start |= TreatWarningsAsErrors

TreatWarningsAsErrors = element TreatWarningsAsErrors { StringPropertyType }

start |= TrustUrlParameters

TrustUrlParameters = 
   element TrustUrlParameters
   {
      boolean
      >>
      a:documentation [ """boolean """ ]
   }

start |= TypeComplianceDiagnostics

TypeComplianceDiagnostics = 
   element TypeComplianceDiagnostics { StringPropertyType }

start |= UICulture

UICulture = element UICulture { StringPropertyType }

start |= UpgradeBackupLocation

UpgradeBackupLocation = element UpgradeBackupLocation { StringPropertyType }

start |= UpdateEnabled

UpdateEnabled = 
   element UpdateEnabled
   {
      boolean
      >>
      a:documentation [ """boolean """ ]
   }

start |= UpdateInterval

UpdateInterval = element UpdateInterval { StringPropertyType }

start |= UpdateIntervalUnits

UpdateIntervalUnits = 
   element UpdateIntervalUnits
   {
      StringPropertyType
      >>
      a:documentation [ """Hours, Days, or Weeks """ ]
   }

start |= UpdateMode

UpdateMode = 
   element UpdateMode
   {
      StringPropertyType
      >>
      a:documentation [ """Foreground or Background """ ]
   }

start |= UpdatePeriodically

UpdatePeriodically = 
   element UpdatePeriodically
   {
      boolean
      >>
      a:documentation [ """boolean """ ]
   }

start |= UpdateRequired

UpdateRequired = 
   element UpdateRequired
   {
      boolean
      >>
      a:documentation [ """boolean """ ]
   }

start |= UpdateUrl

UpdateUrl = element UpdateUrl { StringPropertyType }

start |= UseAppConfigForCompiler

UseAppConfigForCompiler = element UseAppConfigForCompiler { boolean }

start |= UseApplicationTrust

UseApplicationTrust = element UseApplicationTrust { StringPropertyType }

start |= UseOfMfc

UseOfMfc = element UseOfMfc { StringPropertyType }

start |= UseOfAtl

UseOfAtl = element UseOfAtl { StringPropertyType }

start |= UseWindowsForms

UseWindowsForms = element UseWindowsForms { boolean }

start |= UseWPF

UseWPF = element UseWPF { boolean }

start |= UseVSHostingProcess

UseVSHostingProcess = element UseVSHostingProcess { StringPropertyType }

start |= UTF8OutPut

UTF8OutPut = element UTF8OutPut { StringPropertyType }

start |= VCTargetsPath

VCTargetsPath = element VCTargetsPath { StringPropertyType }

start |= VSTO_TrustAssembliesLocation

VSTO_TrustAssembliesLocation = 
   element VSTO_TrustAssembliesLocation { StringPropertyType }

start |= WarningLevel

WarningLevel = 
   element WarningLevel
   {
      StringPropertyType
      >>
      a:documentation [ """integer between 0 and 5 inclusive """ ]
   }

start |= WarningsAsErrors

WarningsAsErrors = 
   element WarningsAsErrors
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Comma separated list of warning numbers to treat as errors
        """
      ]
   }

start |= WebPage

WebPage = element WebPage { StringPropertyType }

start |= Win32ResourceFile

Win32ResourceFile = element Win32ResourceFile { StringPropertyType }

start |= WholeProgramOptimization

WholeProgramOptimization = 
   element WholeProgramOptimization { StringPropertyType }

start |= TieredCompilation

TieredCompilation = 
   element TieredCompilation
   {
      boolean
      >>
      a:documentation
      [
         """Indicates whether the runtime should enable tiered JIT compilation.
        """
      ]
   }

start |= ServerGarbageCollection

ServerGarbageCollection = 
   element ServerGarbageCollection
   {
      boolean
      >>
      a:documentation
      [
         """Indicates whether the runtime should enable the server garbage collection mode.
        """
      ]
   }

start |= UserSecretsId

UserSecretsId = 
   element UserSecretsId
   {
      StringPropertyType
      >>
      a:documentation
      [
         """The ID that will be used to locate the file storing secret configuration values for this project at development time.
        """
      ]
   }

start |= RazorCompileOnBuild

RazorCompileOnBuild = 
   element RazorCompileOnBuild
   {
      boolean
      >>
      a:documentation
      [
         """Indicates whether Razor files should be compiled at build time.
        """
      ]
   }

start |= RazorCompileOnPublish

RazorCompileOnPublish = 
   element RazorCompileOnPublish
   {
      boolean
      >>
      a:documentation
      [
         """Indicates whether Razor files should be compiled at publish time.
        """
      ]
   }

start |= UseRazorBuildServer

UseRazorBuildServer = 
   element UseRazorBuildServer
   {
      boolean
      >>
      a:documentation
      [
         """Indicates whether Razor code generation should use a persistent build server process.
        """
      ]
   }

start |= RazorOutputPath

RazorOutputPath = 
   element RazorOutputPath
   {
      StringPropertyType
      >>
      a:documentation [ """Directory for Razor output. """ ]
   }

start |= EnableDefaultRazorGenerateItems

EnableDefaultRazorGenerateItems = 
   element EnableDefaultRazorGenerateItems
   {
      boolean
      >>
      a:documentation
      [
         """Set to true to automatically include Razor (.cshtml) files in @(RazorGenerate) from @(Content).
        """
      ]
   }

start |= EnableDefaultContentItems

EnableDefaultContentItems = 
   element EnableDefaultContentItems
   {
      boolean
      >>
      a:documentation
      [
         """Set to true to automatically include certain file types, such as .cshtml files, as content in the project. When referenced via Microsoft.NET.Sdk.Web, this additionally includes all files under wwwroot, and any config files.
        """
      ]
   }

start |= EnableDefaultRazorComponentItems

EnableDefaultRazorComponentItems = 
   element EnableDefaultRazorComponentItems
   {
      boolean
      >>
      a:documentation
      [
         """Set to true to automatically include Razor (.razor) files in @(RazorComponent) from @(Content).
        """
      ]
   }

start |= CopyRazorGenerateFilesToPublishDirectory

CopyRazorGenerateFilesToPublishDirectory = 
   element CopyRazorGenerateFilesToPublishDirectory
   {
      boolean
      >>
      a:documentation
      [
         """Set to true to copy RazorGenerate items (.cshtml) to the publish directory. Typically Razor files are not needed for a published application if they participate in compilation at build-time or publish-time. By default, the Razor SDK will suppress the copying of RazorGenerate items to the publish directory.
        """
      ]
   }

start |= CopyRefAssembliesToPublishDirectory

CopyRefAssembliesToPublishDirectory = 
   element CopyRefAssembliesToPublishDirectory
   {
      boolean
      >>
      a:documentation
      [
         """Set to true to copy reference assembly items to the publish directory. Typically reference assemblies are not needed for a published application if Razor compilation occurs at build-time or publish-time. By default, the Razor SDK will suppress the copying of reference assemblies to the publish directory.
        """
      ]
   }

start |= IncludeRazorContentInPack

IncludeRazorContentInPack = 
   element IncludeRazorContentInPack
   {
      boolean
      >>
      a:documentation
      [
         """Configures whether all Razor content items (.cshtml files) will be marked to be included in the produced NuGet package as content. All Content items are included in a NuGet package as content files. This setting can be used to control this behavior for Razor content items.
        """
      ]
   }

start |= RazorTargetName

RazorTargetName = 
   element RazorTargetName
   {
      StringPropertyType
      >>
      a:documentation
      [
         """File name (without extension) of the assembly produced by Razor.
        """
      ]
   }

start |= EmbedRazorGenerateSources

EmbedRazorGenerateSources = 
   element EmbedRazorGenerateSources
   {
      boolean
      >>
      a:documentation
      [
         """Configures whether all of the @(RazorGenerate) items will be added as embedded files to the produced assembly. When true, everything in @(RazorGenerate) will be added to @(RazorEmbeddedFiles) and passed to CSC.
        """
      ]
   }

start |= DisableProtobufDesignTimeBuild

DisableProtobufDesignTimeBuild = 
   element DisableProtobufDesignTimeBuild
   {
      boolean
      >>
      a:documentation
      [
         """Indicates whether Design Time Build should be disabled for referenced @(Protobuf) files.
        """
      ]
   }

start |= AssemblyTitle

AssemblyTitle = 
   element AssemblyTitle
   {
      StringPropertyType
      >>
      a:documentation [ """Description for the assembly manifest """ ]
   }

start |= AssemblyVersion

AssemblyVersion = 
   element AssemblyVersion
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Numeric value of the version for the assembly manifest in the format major.minor.patch (e.g. 2.4.0)
      """
      ]
   }

start |= Authors

Authors = 
   element Authors
   {
      StringPropertyType
      >>
      a:documentation
      [
         """A comma-separated list of NuGet packages authors
      """
      ]
   }

start |= Company

Company = 
   element Company
   {
      StringPropertyType
      >>
      a:documentation [ """Company name for the assembly manifest """ ]
   }

start |= Copyright

Copyright = 
   element Copyright
   {
      StringPropertyType
      >>
      a:documentation [ """Copyright details for the NuGet package """ ]
   }

start |= Description

Description = 
   element Description
   {
      StringPropertyType
      >>
      a:documentation
      [
         """A long description of the NuGet package for UI display
      """
      ]
   }

start |= FileVersion

FileVersion = 
   element FileVersion
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Numeric value of the version for the assembly manifest in the format major.minor.build.revision (e.g. 2.4.0.1)
      """
      ]
   }

start |= InformationalVersion

InformationalVersion = 
   element InformationalVersion
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Product version of the assembly for UI display (e.g. 1.0 Beta)
      """
      ]
   }

start |= NeutralLanguage

NeutralLanguage = 
   element NeutralLanguage
   {
      StringPropertyType
      >>
      a:documentation [ """The locale ID for the NuGet package """ ]
   }

start |= PackageIconUrl

PackageIconUrl = 
   element PackageIconUrl
   {
      StringPropertyType
      >>
      a:documentation
      [
         """The URL for a 64x64 image with transparent background to use as the icon for the NuGet package in UI display
      """
      ]
   }

start |= PackageId

PackageId = 
   element PackageId
   {
      StringPropertyType
      >>
      a:documentation
      [
         """The case-insensitive NuGet package identifier, which must be unique across nuget.org or whatever gallery the NuGet package will reside in. IDs may not contain spaces or characters that are not valid for a URL, and generally follow .NET namespace rules.
      """
      ]
   }

start |= Title

Title = 
   element Title
   {
      StringPropertyType
      >>
      a:documentation
      [
         """A human-friendly title of the package, typically used in UI displays as on nuget.org and the Package Manager in Visual Studio. If not specified, the package ID is used instead.
      """
      ]
   }

start |= PackageLicenseUrl

PackageLicenseUrl = 
   element PackageLicenseUrl
   {
      StringPropertyType
      >>
      a:documentation
      [
         """The URL for the NuGet package's license, often shown in UI displays as well as nuget.org
      """
      ]
   }

start |= PackageProjectUrl

PackageProjectUrl = 
   element PackageProjectUrl
   {
      StringPropertyType
      >>
      a:documentation
      [
         """The URL for the NuGet package's home page, often shown in UI displays as well as nuget.org
      """
      ]
   }

start |= PackageReleaseNotes

PackageReleaseNotes = 
   element PackageReleaseNotes
   {
      StringPropertyType
      >>
      a:documentation
      [
         """A description of the changes made in this release of the NuGet package, often used in UI like the Updates tab of the Visual Studio Package Manager in place of the package description
      """
      ]
   }

start |= PackageRequireLicenseAcceptance

PackageRequireLicenseAcceptance = 
   element PackageRequireLicenseAcceptance
   {
      boolean
      >>
      a:documentation
      [
         """Value indicating whether the client must prompt the consumer to accept the NuGet package license before installing the package
      """
      ]
   }

start |= PackageTags

PackageTags = 
   element PackageTags
   {
      StringPropertyType
      >>
      a:documentation
      [
         """A space-delimited list of tags and keywords that describe the NuGet package and aid discoverability of NuGet packages through search and filtering mechanisms
      """
      ]
   }

start |= PackageVersion

PackageVersion = 
   element PackageVersion
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Numeric value of the NuGet package version in the format major.minor.patch pattern (e.g. 1.0.1). Version numbers may include a pre-release suffix (e.g. 1.0.1-beta)
      """
      ]
   }

start |= Product

Product = 
   element Product
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Product name information for the assembly manifest
      """
      ]
   }

start |= Version

Version = 
   element Version
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Numeric value of the version in the format major.minor.patch (e.g. 2.4.0)
      """
      ]
   }

start |= VersionPrefix

VersionPrefix = 
   element VersionPrefix
   {
      StringPropertyType
      >>
      a:documentation
      [
         """When Version is not specified, VersionPrefix represents the first fragment of the version string (e.g. 1.0.0). The syntax is VersionPrefix[-VersionSuffix].
      """
      ]
   }

start |= VersionSuffix

VersionSuffix = 
   element VersionSuffix
   {
      StringPropertyType
      >>
      a:documentation
      [
         """When Version is not specified, VersionSuffix represents the second fragment of the version string (e.g. beta). The syntax is VersionPrefix[-VersionSuffix].
      """
      ]
   }

start |= RestoreSources

RestoreSources = 
   element RestoreSources
   {
      StringPropertyType
      >>
      a:documentation
      [
         """The feeds that NuGet will use for restoring packages for this project.
      """
      ]
   }

start |= PackageLicenseExpression

PackageLicenseExpression = 
   element PackageLicenseExpression
   {
      StringPropertyType
      >>
      a:documentation
      [
         """The project license's SPDX identifier. Only OSI and FSF approved licenses can use an identifier. Other licenses should use PackageLicenseFile.
      """
      ]
   }

start |= PackageLicenseFile

PackageLicenseFile = 
   element PackageLicenseFile
   {
      StringPropertyType
      >>
      a:documentation
      [
         """A path to the package's license file. Should only be used when the package doesn't use an OSI or FSF approved license.
      """
      ]
   }

start |= PackageType

PackageType = 
   element PackageType
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Indicates what the intended package use is, e.g. .NET CLI global tool, standard dependency, etc.
      """
      ]
   }

start |= PublishReadyToRun

PublishReadyToRun = 
   element PublishReadyToRun
   {
      boolean
      >>
      a:documentation
      [
         """Indicates whether the project should produce ReadyToRun images during publish.
      """
      ]
   }

start |= PublishSingleFile

PublishSingleFile = 
   element PublishSingleFile
   {
      boolean
      >>
      a:documentation
      [
         """Indicates whether the project should produce a self-extracting executable during publish.
      """
      ]
   }

start |= PublishTrimmed

PublishTrimmed = 
   element PublishTrimmed
   {
      boolean
      >>
      a:documentation
      [
         """Indicates whether the project should produce trimmed assembly images during publish.
      """
      ]
   }

start |= TrimmerRootAssembly

TrimmerRootAssembly = 
   element TrimmerRootAssembly
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Indicates to the linker to explicitly keep an assembly by adding it to your csproj (use the assembly name without extension).
      """
      ]
   }

start |= TrimmerRootDescriptor

TrimmerRootDescriptor = 
   element TrimmerRootDescriptor
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Gives the linker a more specific list of types/methods, etc. to include. Path to an xml file.
      """
      ]
   }

start |= AndroidApplication

AndroidApplication = 
   element AndroidApplication
   {
      boolean
      >>
      a:documentation
      [
         """Used by Xamarin.Android projects. A boolean value that indicates whether the project is for an Android Application (True) or for an Android Library Project (False or not present).
      """
      ]
   }

start |= AndroidDexTool

AndroidDexTool = 
   ## Used by Xamarin.Android projects. A string property that indicates which Android dex compiler is used during the Xamarin.Android build process.
   ##       

   element AndroidDexTool
   {
      "d8" | "dx"
   }

start |= AndroidEnableProfiledAot

AndroidEnableProfiledAot = 
   element AndroidEnableProfiledAot
   {
      boolean
      >>
      a:documentation
      [
         """Used by Xamarin.Android projects. A boolean property that determines whether or not AOT profiles are used during Ahead-of-Time compilation.
      """
      ]
   }

start |= AndroidLinkMode

AndroidLinkMode = 
   ## Used by Xamarin.Android projects. A string property that specifies which type of linking should be performed on assemblies contained within the Android package. Only used in Android Application projects.
   ##       

   element AndroidLinkMode
   {
      "None" | "SdkOnly" | "Full"
   }

start |= AndroidLinkTool

AndroidLinkTool = 
   ## Used by Xamarin.Android projects. A string property that indicates which code shrinker is used for Java code.
   ##       

   element AndroidLinkTool
   {
      "r8" | "proguard"
   }

start |= AndroidLinkSkip

AndroidLinkSkip = 
   element AndroidLinkSkip
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Used by Xamarin.Android projects. Specifies a semicolon-delimited (;) list of assembly names, without file extensions, of assemblies that should not be linked.
      """
      ]
   }

start |= AndroidPackageFormat

AndroidPackageFormat = 
   ## Used by Xamarin.Android projects. A string property that indicates if you want to package the Android application as an APK file or Android App Bundle.
   ##       

   element AndroidPackageFormat
   {
      "apk" | "aab"
   }

start |= AndroidSupportedAbis

AndroidSupportedAbis = 
   element AndroidSupportedAbis
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Used by Xamarin.Android projects. A string property that contains a semicolon (;)-delimited list of ABIs which should be included into the application.
      """
      ]
   }

start |= AotAssemblies

AotAssemblies = 
   element AotAssemblies
   {
      boolean
      >>
      a:documentation
      [
         """Used by Xamarin.Android projects. A boolean property that determines whether or not assemblies will be Ahead-of-Time compiled into native code.
      """
      ]
   }

start |= AL

AL = 
   element AL
   {
      TaskType,
      attribute AlgorithmId { text }?,
      attribute BaseAddress { text }?,
      attribute CompanyName { text }?,
      attribute Configuration { text }?,
      attribute Copyright { text }?,
      attribute Culture { text }?,
      attribute DelaySign { boolean }?,
      attribute Description { text }?,
      attribute EmbedResources { text }?,
      attribute EnvironmentVariables { text }?,
      attribute EvidenceFile { text }?,
      attribute FileVersion { text }?,
      attribute Flags { text }?,
      attribute GenerateFullPaths { boolean }?,
      attribute KeyContainer { text }?,
      attribute KeyFile { text }?,
      attribute LinkResources { text }?,
      attribute LogStandardErrorAsError { boolean }?,
      attribute MainEntryPoint { text }?,
      attribute OutputAssembly { text },
      attribute Platform { text }?,
      attribute ProductName { text }?,
      attribute ProductVersion { text }?,
      attribute ResponseFiles { text }?,
      attribute SdkToolsPath { text }?,
      attribute SourceModules { text }?,
      attribute StandardErrorImportance { text }?,
      attribute StandardOutputImportance { text }?,
      attribute TargetType { text }?,
      attribute TemplateFile { text }?,
      attribute Timeout { text }?,
      attribute Title { text }?,
      attribute ToolExe { text }?,
      attribute ToolPath { text }?,
      attribute Trademark { text }?,
      attribute Version { text }?,
      attribute Win32Icon { text }?,
      attribute Win32Resource { text }?
   }

start |= AspNetCompiler

AspNetCompiler = 
   element AspNetCompiler
   {
      TaskType,
      attribute AllowPartiallyTrustedCallers { boolean }?,
      attribute Clean { boolean }?,
      attribute Debug { boolean }?,
      attribute DelaySign { boolean }?,
      attribute EnvironmentVariables { text }?,
      attribute FixedNames { boolean }?,
      attribute Force { boolean }?,
      attribute KeyContainer { text }?,
      attribute KeyFile { text }?,
      attribute LogStandardErrorAsError { boolean }?,
      attribute MetabasePath { text }?,
      attribute PhysicalPath { text }?,
      attribute StandardErrorImportance { text }?,
      attribute StandardOutputImportance { text }?,
      attribute TargetFrameworkMoniker { text }?,
      attribute TargetPath { text }?,
      attribute Timeout { text }?,
      attribute ToolExe { text }?,
      attribute ToolPath { text }?,
      attribute Updateable { boolean }?,
      attribute VirtualPath { text }?
   }

start |= AssignCulture

AssignCulture = element AssignCulture { TaskType, attribute Files { text } }

start |= AssignProjectConfiguration

AssignProjectConfiguration = 
   element AssignProjectConfiguration
   {
      TaskType,
      attribute AssignedProjects { text }?,
      attribute CurrentProjectConfiguration { text }?,
      attribute CurrentProjectPlatform { text }?,
      attribute DefaultToVcxPlatformMapping { text }?,
      attribute ProjectReferences { text },
      attribute ResolveConfigurationPlatformUsingMappings { boolean }?,
      attribute SolutionConfigurationContents { text }?,
      attribute UnassignedProjects { text }?,
      attribute VcxToDefaultPlatformMapping { text }?
   }

start |= AssignTargetPath

AssignTargetPath = 
   element AssignTargetPath
   {
      TaskType,
      attribute Files { text }?,
      attribute RootFolder { text }
   }

start |= AxImp

AxImp = 
   element AxImp
   {
      TaskType,
      attribute ActiveXControlName { text }?,
      attribute DelaySign { boolean }?,
      attribute EnvironmentVariables { text }?,
      attribute GenerateSource { boolean }?,
      attribute KeyContainer { text }?,
      attribute KeyFile { text }?,
      attribute LogStandardErrorAsError { boolean }?,
      attribute NoLogo { boolean }?,
      attribute OutputAssembly { text }?,
      attribute RuntimeCallableWrapperAssembly { text }?,
      attribute SdkToolsPath { text }?,
      attribute Silent { boolean }?,
      attribute StandardErrorImportance { text }?,
      attribute StandardOutputImportance { text }?,
      attribute Timeout { text }?,
      attribute ToolExe { text }?,
      attribute ToolPath { text }?,
      attribute Verbose { boolean }?
   }

start |= CallTarget

CallTarget = 
   element CallTarget
   {
      TaskType,
      attribute RunEachTargetSeparately { boolean }?,
      attribute Targets { text }?,
      attribute UseResultsCache { boolean }?
   }

start |= CombinePath

CombinePath = 
   element CombinePath
   {
      TaskType,
      attribute BasePath { text }?,
      attribute CombinedPaths { text }?,
      attribute Paths { text }
   }

start |= ConvertToAbsolutePath

ConvertToAbsolutePath = 
   element ConvertToAbsolutePath
   {
      TaskType,
      attribute AbsolutePaths { text }?,
      attribute Paths { text }
   }

start |= Copy

Copy = 
   element Copy
   {
      TaskType,
      attribute DestinationFiles { text }?,
      attribute DestinationFolder { text }?,
      attribute OverwriteReadOnlyFiles { boolean }?,
      attribute Retries { text }?,
      attribute RetryDelayMilliseconds { text }?,
      attribute SkipUnchangedFiles { boolean }?,
      attribute UseHardlinksIfPossible { boolean }?,
      attribute UseSymboliclinksIfPossible { boolean }?,
      attribute SourceFiles { text }
   }

start |= CreateCSharpManifestResourceName

CreateCSharpManifestResourceName = 
   element CreateCSharpManifestResourceName
   {
      TaskType,
      attribute PrependCultureAsDirectory { boolean }?,
      attribute ResourceFiles { text },
      attribute ResourceFilesWithManifestResourceNames { text }?,
      attribute RootNamespace { text }?
   }

start |= CreateItem

CreateItem = 
   element CreateItem
   {
      TaskType,
      attribute AdditionalMetadata { text }?,
      attribute Exclude { text }?,
      attribute Include { text }?,
      attribute PreserveExistingMetadata { boolean }?
   }

start |= CreateProperty

CreateProperty = element CreateProperty { TaskType, attribute Value { text }? }

start |= CreateVisualBasicManifestResourceName

CreateVisualBasicManifestResourceName = 
   element CreateVisualBasicManifestResourceName
   {
      TaskType,
      attribute PrependCultureAsDirectory { boolean }?,
      attribute ResourceFiles { text },
      attribute ResourceFilesWithManifestResourceNames { text }?,
      attribute RootNamespace { text }?
   }

start |= Csc

Csc = 
   element Csc
   {
      TaskType,
      attribute AdditionalLibPaths { text }?,
      attribute AddModules { text }?,
      attribute AllowUnsafeBlocks { boolean }?,
      attribute BaseAddress { text }?,
      attribute CheckForOverflowUnderflow { boolean }?,
      attribute CodePage { text }?,
      attribute DebugType { text }?,
      attribute DefineConstants { text }?,
      attribute DelaySign { boolean }?,
      attribute DisabledWarnings { text }?,
      attribute DocumentationFile { text }?,
      attribute EmitDebugInformation { boolean }?,
      attribute EnvironmentVariables { text }?,
      attribute ErrorReport { text }?,
      attribute FileAlignment { text }?,
      attribute GenerateFullPaths { boolean }?,
      attribute KeyContainer { text }?,
      attribute KeyFile { text }?,
      attribute LangVersion { text }?,
      attribute LinkResources { text }?,
      attribute LogStandardErrorAsError { boolean }?,
      attribute MainEntryPoint { text }?,
      attribute ModuleAssemblyName { text }?,
      attribute NoConfig { boolean }?,
      attribute NoLogo { boolean }?,
      attribute NoStandardLib { boolean }?,
      attribute NoWin32Manifest { boolean }?,
      attribute Optimize { boolean }?,
      attribute OutputAssembly { text }?,
      attribute PdbFile { text }?,
      attribute Platform { text }?,
      attribute References { text }?,
      attribute Resources { text }?,
      attribute ResponseFiles { text }?,
      attribute Sources { text }?,
      attribute StandardErrorImportance { text }?,
      attribute StandardOutputImportance { text }?,
      attribute TargetType { text }?,
      attribute Timeout { text }?,
      attribute ToolExe { text }?,
      attribute ToolPath { text }?,
      attribute TreatWarningsAsErrors { boolean }?,
      attribute UseHostCompilerIfAvailable { boolean }?,
      attribute Utf8Output { boolean }?,
      attribute WarningLevel { text }?,
      attribute WarningsAsErrors { text }?,
      attribute WarningsNotAsErrors { text }?,
      attribute Win32Icon { text }?,
      attribute Win32Manifest { text }?,
      attribute Win32Resource { text }?
   }

start |= Delete

Delete = 
   element Delete
   {
      TaskType,
      attribute DeletedFiles { text }?,
      attribute Files { text },
      attribute TreatErrorsAsWarnings { boolean }?
   }

start |= Error

Error = 
   element Error
   {
      TaskType,
      attribute Code { text }?,
      attribute File { text }?,
      attribute HelpKeyword { text }?,
      attribute Text { text }?
   }

start |= Exec

Exec = 
   element Exec
   {
      TaskType,
      attribute Command { text },
      attribute CustomErrorRegularExpression { text }?,
      attribute CustomWarningRegularExpression { text }?,
      attribute EnvironmentVariables { text }?,
      attribute IgnoreExitCode { boolean }?,
      attribute IgnoreStandardErrorWarningFormat { boolean }?,
      attribute LogStandardErrorAsError { boolean }?,
      attribute Outputs { text }?,
      attribute StandardErrorImportance { text }?,
      attribute StandardOutputImportance { text }?,
      attribute StdErrEncoding { text }?,
      attribute StdOutEncoding { text }?,
      attribute Timeout { text }?,
      attribute ToolExe { text }?,
      attribute ToolPath { text }?,
      attribute WorkingDirectory { text }?
   }

start |= FindAppConfigFile

FindAppConfigFile = 
   element FindAppConfigFile
   {
      TaskType,
      attribute AppConfigFile { text }?,
      attribute PrimaryList { text },
      attribute SecondaryList { text },
      attribute TargetPath { text }
   }

start |= FindInList

FindInList = 
   element FindInList
   {
      TaskType,
      attribute CaseSensitive { boolean }?,
      attribute FindLastMatch { boolean }?,
      attribute ItemFound { text }?,
      attribute ItemSpecToFind { text },
      attribute List { text },
      attribute MatchFileNameOnly { boolean }?
   }

start |= FindUnderPath

FindUnderPath = 
   element FindUnderPath
   {
      TaskType,
      attribute Files { text }?,
      attribute InPath { text }?,
      attribute OutOfPath { text }?,
      attribute Path { text },
      attribute UpdateToAbsolutePaths { boolean }?
   }

start |= FormatUrl

FormatUrl = 
   element FormatUrl
   {
      TaskType,
      attribute InputUrl { text }?,
      attribute OutputUrl { text }?
   }

start |= FormatVersion

FormatVersion = 
   element FormatVersion
   {
      TaskType,
      attribute FormatType { text }?,
      attribute OutputVersion { text }?,
      attribute Revision { text }?,
      attribute Version { text }?
   }

start |= GenerateApplicationManifest

GenerateApplicationManifest = 
   element GenerateApplicationManifest
   {
      TaskType,
      attribute AssemblyName { text }?,
      attribute AssemblyVersion { text }?,
      attribute ClrVersion { text }?,
      attribute ConfigFile { text }?,
      attribute Dependencies { text }?,
      attribute Description { text }?,
      attribute EntryPoint { text }?,
      attribute ErrorReportUrl { text }?,
      attribute FileAssociations { text }?,
      attribute Files { text }?,
      attribute HostInBrowser { boolean }?,
      attribute IconFile { text }?,
      attribute InputManifest { text }?,
      attribute IsolatedComReferences { text }?,
      attribute LauncherBasedDeployment { boolean }?,
      attribute ManifestType { text }?,
      attribute MaxTargetPath { text }?,
      attribute OSVersion { text }?,
      attribute OutputManifest { text }?,
      attribute Platform { text }?,
      attribute Product { text }?,
      attribute Publisher { text }?,
      attribute RequiresMinimumFramework35SP1 { boolean }?,
      attribute SuiteName { text }?,
      attribute SupportUrl { text }?,
      attribute TargetCulture { text }?,
      attribute TargetFrameworkMoniker { text }?,
      attribute TargetFrameworkProfile { text }?,
      attribute TargetFrameworkSubset { text }?,
      attribute TargetFrameworkVersion { text }?,
      attribute TrustInfoFile { text }?,
      attribute UseApplicationTrust { boolean }?
   }

start |= GenerateBootstrapper

GenerateBootstrapper = 
   element GenerateBootstrapper
   {
      TaskType,
      attribute ApplicationFile { text }?,
      attribute ApplicationName { text }?,
      attribute ApplicationRequiresElevation { boolean }?,
      attribute ApplicationUrl { text }?,
      attribute BootstrapperComponentFiles { text }?,
      attribute BootstrapperItems { text }?,
      attribute BootstrapperKeyFile { text }?,
      attribute ComponentsLocation { text }?,
      attribute ComponentsUrl { text }?,
      attribute CopyComponents { boolean }?,
      attribute Culture { text }?,
      attribute FallbackCulture { text }?,
      attribute OutputPath { text }?,
      attribute Path { text }?,
      attribute SupportUrl { text }?,
      attribute Validate { boolean }?
   }

start |= GenerateDeploymentManifest

GenerateDeploymentManifest = 
   element GenerateDeploymentManifest
   {
      TaskType,
      attribute AssemblyName { text }?,
      attribute AssemblyVersion { text }?,
      attribute CreateDesktopShortcut { boolean }?,
      attribute DeploymentUrl { text }?,
      attribute Description { text }?,
      attribute DisallowUrlActivation { boolean }?,
      attribute EntryPoint { text }?,
      attribute ErrorReportUrl { text }?,
      attribute InputManifest { text }?,
      attribute Install { boolean }?,
      attribute LauncherBasedDeployment { boolean }?,
      attribute MapFileExtensions { boolean }?,
      attribute MaxTargetPath { text }?,
      attribute MinimumRequiredVersion { text }?,
      attribute OutputManifest { text }?,
      attribute Platform { text }?,
      attribute Product { text }?,
      attribute Publisher { text }?,
      attribute SuiteName { text }?,
      attribute SupportUrl { text }?,
      attribute TargetCulture { text }?,
      attribute TargetFrameworkMoniker { text }?,
      attribute TargetFrameworkVersion { text }?,
      attribute TrustUrlParameters { boolean }?,
      attribute UpdateEnabled { boolean }?,
      attribute UpdateInterval { text }?,
      attribute UpdateMode { text }?,
      attribute UpdateUnit { text }?
   }

start |= GenerateLauncher

GenerateLauncher = 
   element GenerateLauncher
   {
      TaskType,
      attribute EntryPoint { text }?,
      attribute OutputPath { text }?,
      attribute VisualStudioVersion { text }?
   }

start |= GenerateResource

GenerateResource = 
   element GenerateResource
   {
      TaskType,
      attribute AdditionalInputs { text }?,
      attribute ExcludedInputPaths { text }?,
      attribute ExecuteAsTool { boolean }?,
      attribute MinimalRebuildFromTracking { boolean }?,
      attribute NeverLockTypeAssemblies { boolean }?,
      attribute OutputResources { text }?,
      attribute PublicClass { boolean }?,
      attribute References { text }?,
      attribute SdkToolsPath { text }?,
      attribute Sources { text },
      attribute StateFile { text }?,
      attribute StronglyTypedClassName { text }?,
      attribute StronglyTypedFileName { text }?,
      attribute StronglyTypedLanguage { text }?,
      attribute StronglyTypedManifestPrefix { text }?,
      attribute StronglyTypedNamespace { text }?,
      attribute TrackerLogDirectory { text }?,
      attribute TrackFileAccess { boolean }?,
      attribute UseSourcePath { boolean }?,
      attribute ExtractResWFiles { boolean }?,
      attribute OutputDirectory { text }?,
      attribute MSBuildRuntime { text }?,
      attribute MSBuildArchitecture { text }?
   }

start |= GenerateTrustInfo

GenerateTrustInfo = 
   element GenerateTrustInfo
   {
      TaskType,
      attribute ApplicationDependencies { text }?,
      attribute BaseManifest { text }?,
      attribute ExcludedPermissions { text }?,
      attribute TargetFrameworkMoniker { text }?,
      attribute TargetZone { text }?,
      attribute TrustInfoFile { text }
   }

start |= GetAssemblyIdentity

GetAssemblyIdentity = 
   element GetAssemblyIdentity
   {
      TaskType,
      attribute Assemblies { text }?,
      attribute AssemblyFiles { text }
   }

start |= GetFileHash

GetFileHash = 
   element GetFileHash
   {
      TaskType,
      attribute Files { text },
      attribute Algorithm { text }?,
      attribute MetadataName { text }?,
      attribute HashEncoding { text }?,
      attribute Hash { text }?,
      attribute Items { text }?
   }

start |= GetFrameworkPath

GetFrameworkPath = 
   element GetFrameworkPath { TaskType, attribute Path { text }? }

start |= GetFrameworkSdkPath

GetFrameworkSdkPath = 
   element GetFrameworkSdkPath { TaskType, attribute Path { text }? }

start |= GetReferenceAssemblyPaths

GetReferenceAssemblyPaths = 
   element GetReferenceAssemblyPaths
   {
      TaskType,
      attribute RootPath { text }?,
      attribute TargetFrameworkMoniker { text }?,
      attribute TargetFrameworkMonikerDisplayName { text }?,
      attribute BypassFrameworkInstallChecks { text }?
   }

start |= LC

LC = 
   element LC
   {
      TaskType,
      attribute EnvironmentVariables { text }?,
      attribute LicenseTarget { text },
      attribute LogStandardErrorAsError { boolean }?,
      attribute NoLogo { boolean }?,
      attribute OutputDirectory { text }?,
      attribute OutputLicense { text }?,
      attribute ReferencedAssemblies { text }?,
      attribute SdkToolsPath { text }?,
      attribute Sources { text },
      attribute StandardErrorImportance { text }?,
      attribute StandardOutputImportance { text }?,
      attribute Timeout { text }?,
      attribute ToolExe { text }?,
      attribute ToolPath { text }?
   }

start |= MakeDir

MakeDir = element MakeDir { TaskType, attribute Directories { text } }

start |= Message

Message = 
   element Message
   {
      TaskType,
      attribute Importance { importance }?,
      attribute Text { text }?
   }

start |= Move

Move = 
   element Move
   {
      TaskType,
      attribute DestinationFiles { text }?,
      attribute DestinationFolder { text }?,
      attribute OverwriteReadOnlyFiles { boolean }?,
      attribute SourceFiles { text }
   }

start |= MSBuild

MSBuild = 
   element MSBuild
   {
      TaskType,
      attribute BuildInParallel { boolean }?,
      attribute Projects { text },
      attribute Properties { text }?,
      attribute RebaseOutputs { boolean }?,
      attribute RunEachTargetSeparately { boolean }?,
      attribute SkipNonexistentProjects { boolean }?,
      attribute SkipNonexistentTargets { boolean }?,
      attribute StopOnFirstFailure { boolean }?,
      attribute TargetAndPropertyListSeparators { text }?,
      attribute Targets { text }?,
      attribute ToolsVersion { text }?,
      attribute UnloadProjectsOnCompletion { boolean }?,
      attribute UseResultsCache { boolean }?
   }

start |= ReadLinesFromFile

ReadLinesFromFile = 
   element ReadLinesFromFile
   {
      TaskType,
      attribute File { text },
      attribute Lines { text }?
   }

start |= RegisterAssembly

RegisterAssembly = 
   element RegisterAssembly
   {
      TaskType,
      attribute Assemblies { text },
      attribute AssemblyListFile { text }?,
      attribute CreateCodeBase { boolean }?,
      attribute TypeLibFiles { text }?
   }

start |= RemoveDir

RemoveDir = 
   element RemoveDir
   {
      TaskType,
      attribute Directories { text },
      attribute RemovedDirectories { text }?
   }

start |= RemoveDuplicates

RemoveDuplicates = 
   element RemoveDuplicates
   {
      TaskType,
      attribute Filtered { text }?,
      attribute HadAnyDuplicates { boolean }?,
      attribute Inputs { text }?
   }

start |= RequiresFramework35SP1Assembly

RequiresFramework35SP1Assembly = 
   element RequiresFramework35SP1Assembly
   {
      TaskType,
      attribute Assemblies { text }?,
      attribute CreateDesktopShortcut { boolean }?,
      attribute DeploymentManifestEntryPoint { text }?,
      attribute EntryPoint { text }?,
      attribute ErrorReportUrl { text }?,
      attribute Files { text }?,
      attribute ReferencedAssemblies { text }?,
      attribute RequiresMinimumFramework35SP1 { boolean }?,
      attribute SigningManifests { boolean }?,
      attribute SuiteName { text }?,
      attribute TargetFrameworkVersion { text }?
   }

start |= ResolveAssemblyReference

ResolveAssemblyReference = 
   element ResolveAssemblyReference
   {
      TaskType,
      attribute AllowedAssemblyExtensions { text }?,
      attribute AllowedGlobalAssemblyNamePrefix { text }?,
      attribute AllowedRelatedFileExtensions { text }?,
      attribute AppConfigFile { text }?,
      attribute Assemblies { text }?,
      attribute AssemblyFiles { text }?,
      attribute AutoUnify { boolean }?,
      attribute CandidateAssemblyFiles { text }?,
      attribute FilesWritten { text }?,
      attribute FindDependencies { boolean }?,
      attribute FindRelatedFiles { boolean }?,
      attribute FindSatellites { boolean }?,
      attribute FindSerializationAssemblies { boolean }?,
      attribute FullFrameworkAssemblyTables { text }?,
      attribute FullFrameworkFolders { text }?,
      attribute FullTargetFrameworkSubsetNames { text }?,
      attribute IgnoreDefaultInstalledAssemblySubsetTables { boolean }?,
      attribute IgnoreDefaultInstalledAssemblyTables { boolean }?,
      attribute InstalledAssemblySubsetTables { text }?,
      attribute InstalledAssemblyTables { text }?,
      attribute ProfileName { text }?,
      attribute PublicKeysRestrictedForGlobalLocation { text }?,
      attribute SearchPaths { text },
      attribute Silent { boolean }?,
      attribute StateFile { text }?,
      attribute TargetedRuntimeVersion { text }?,
      attribute TargetFrameworkDirectories { text }?,
      attribute TargetFrameworkMoniker { text }?,
      attribute TargetFrameworkMonikerDisplayName { text }?,
      attribute TargetFrameworkSubsets { text }?,
      attribute TargetFrameworkVersion { text }?,
      attribute TargetProcessorArchitecture { text }?
   }

start |= ResolveComReference

ResolveComReference = 
   element ResolveComReference
   {
      TaskType,
      attribute DelaySign { boolean }?,
      attribute ExecuteAsTool { boolean }?,
      attribute IncludeVersionInInteropName { boolean }?,
      attribute KeyContainer { text }?,
      attribute KeyFile { text }?,
      attribute NoClassMembers { boolean }?,
      attribute ResolvedAssemblyReferences { text }?,
      attribute ResolvedFiles { text }?,
      attribute ResolvedModules { text }?,
      attribute SdkToolsPath { text }?,
      attribute StateFile { text }?,
      attribute TargetFrameworkVersion { text }?,
      attribute TargetProcessorArchitecture { text }?,
      attribute TypeLibFiles { text }?,
      attribute TypeLibNames { text }?,
      attribute WrapperOutputDirectory { text }?
   }

start |= ResolveKeySource

ResolveKeySource = 
   element ResolveKeySource
   {
      TaskType,
      attribute AutoClosePasswordPromptShow { text }?,
      attribute AutoClosePasswordPromptTimeout { text }?,
      attribute CertificateFile { text }?,
      attribute CertificateThumbprint { text }?,
      attribute KeyFile { text }?,
      attribute ResolvedKeyContainer { text }?,
      attribute ResolvedKeyFile { text }?,
      attribute ResolvedThumbprint { text }?,
      attribute ShowImportDialogDespitePreviousFailures { boolean }?,
      attribute SuppressAutoClosePasswordPrompt { boolean }?
   }

start |= ResolveManifestFiles

ResolveManifestFiles = 
   element ResolveManifestFiles
   {
      TaskType,
      attribute DeploymentManifestEntryPoint { text }?,
      attribute EntryPoint { text }?,
      attribute ExtraFiles { text }?,
      attribute Files { text }?,
      attribute ManagedAssemblies { text }?,
      attribute NativeAssemblies { text }?,
      attribute OutputAssemblies { text }?,
      attribute OutputDeploymentManifestEntryPoint { text }?,
      attribute OutputEntryPoint { text }?,
      attribute OutputFiles { text }?,
      attribute PublishFiles { text }?,
      attribute SatelliteAssemblies { text }?,
      attribute SigningManifests { boolean }?,
      attribute TargetCulture { text }?,
      attribute TargetFrameworkVersion { text }?
   }

start |= ResolveNativeReference

ResolveNativeReference = 
   element ResolveNativeReference
   {
      TaskType,
      attribute AdditionalSearchPaths { text },
      attribute ContainedComComponents { text }?,
      attribute ContainedLooseEtcFiles { text }?,
      attribute ContainedLooseTlbFiles { text }?,
      attribute ContainedPrerequisiteAssemblies { text }?,
      attribute ContainedTypeLibraries { text }?,
      attribute ContainingReferenceFiles { text }?,
      attribute NativeReferences { text }
   }

start |= ResolveNonMSBuildProjectOutput

ResolveNonMSBuildProjectOutput = 
   element ResolveNonMSBuildProjectOutput
   {
      TaskType,
      attribute PreresolvedProjectOutputs { text }?,
      attribute ProjectReferences { text },
      attribute ResolvedOutputPaths { text }?,
      attribute UnresolvedProjectReferences { text }?
   }

start |= SGen

SGen = 
   element SGen
   {
      TaskType,
      attribute BuildAssemblyName { text },
      attribute BuildAssemblyPath { text },
      attribute DelaySign { boolean }?,
      attribute EnvironmentVariables { text }?,
      attribute KeyContainer { text }?,
      attribute KeyFile { text }?,
      attribute LogStandardErrorAsError { boolean }?,
      attribute References { text }?,
      attribute SdkToolsPath { text }?,
      attribute SerializationAssembly { text }?,
      attribute ShouldGenerateSerializer { boolean },
      attribute StandardErrorImportance { text }?,
      attribute StandardOutputImportance { text }?,
      attribute Timeout { text }?,
      attribute ToolExe { text }?,
      attribute ToolPath { text }?,
      attribute UseProxyTypes { boolean }
   }

start |= SignFile

SignFile = 
   element SignFile
   {
      TaskType,
      attribute CertificateThumbprint { text },
      attribute SigningTarget { text },
      attribute TimestampUrl { text }?
   }

start |= Telemetry

Telemetry = 
   element Telemetry
   {
      TaskType,
      attribute EventName { text },
      attribute EventData { text }?
   }

start |= TlbImp

TlbImp = 
   element TlbImp
   {
      TaskType,
      attribute AssemblyNamespace { text }?,
      attribute AssemblyVersion { text }?,
      attribute DelaySign { boolean }?,
      attribute EnvironmentVariables { text }?,
      attribute KeyContainer { text }?,
      attribute KeyFile { text }?,
      attribute LogStandardErrorAsError { boolean }?,
      attribute NoLogo { boolean }?,
      attribute OutputAssembly { text }?,
      attribute PreventClassMembers { boolean }?,
      attribute SafeArrayAsSystemArray { boolean }?,
      attribute SdkToolsPath { text }?,
      attribute Silent { boolean }?,
      attribute StandardErrorImportance { text }?,
      attribute StandardOutputImportance { text }?,
      attribute Timeout { text }?,
      attribute ToolExe { text }?,
      attribute ToolPath { text }?,
      attribute Transform { text }?,
      attribute TypeLibName { text }?,
      attribute Verbose { boolean }?
   }

start |= Touch

Touch = 
   element Touch
   {
      TaskType,
      attribute AlwaysCreate { boolean }?,
      attribute Files { text },
      attribute ForceTouch { boolean }?,
      attribute Time { text }?,
      attribute TouchedFiles { text }?
   }

start |= UnregisterAssembly

UnregisterAssembly = 
   element UnregisterAssembly
   {
      TaskType,
      attribute Assemblies { text }?,
      attribute AssemblyListFile { text }?,
      attribute TypeLibFiles { text }?
   }

start |= UpdateManifest

UpdateManifest = 
   element UpdateManifest
   {
      TaskType,
      attribute ApplicationManifest { text },
      attribute TargetFrameworkVersion { text }?,
      attribute ApplicationPath { text },
      attribute InputManifest { text },
      attribute OutputManifest { text }?
   }

start |= Vbc

Vbc = 
   element Vbc
   {
      TaskType,
      attribute AdditionalLibPaths { text }?,
      attribute AddModules { text }?,
      attribute BaseAddress { text }?,
      attribute CodePage { text }?,
      attribute DebugType { text }?,
      attribute DefineConstants { text }?,
      attribute DelaySign { boolean }?,
      attribute DisabledWarnings { text }?,
      attribute DocumentationFile { text }?,
      attribute EmitDebugInformation { boolean }?,
      attribute EnvironmentVariables { text }?,
      attribute ErrorReport { text }?,
      attribute FileAlignment { text }?,
      attribute GenerateDocumentation { boolean }?,
      attribute Imports { text }?,
      attribute KeyContainer { text }?,
      attribute KeyFile { text }?,
      attribute LangVersion { text }?,
      attribute VBRuntime { text }?,
      attribute LinkResources { text }?,
      attribute LogStandardErrorAsError { boolean }?,
      attribute MainEntryPoint { text }?,
      attribute ModuleAssemblyName { text }?,
      attribute NoConfig { boolean }?,
      attribute NoLogo { boolean }?,
      attribute NoStandardLib { boolean }?,
      attribute NoVBRuntimeReference { boolean }?,
      attribute NoWarnings { boolean }?,
      attribute NoWin32Manifest { boolean }?,
      attribute Optimize { boolean }?,
      attribute OptionCompare { text }?,
      attribute OptionExplicit { boolean }?,
      attribute OptionInfer { boolean }?,
      attribute OptionStrict { boolean }?,
      attribute OptionStrictType { text }?,
      attribute OutputAssembly { text }?,
      attribute Platform { text }?,
      attribute References { text }?,
      attribute RemoveIntegerChecks { boolean }?,
      attribute Resources { text }?,
      attribute ResponseFiles { text }?,
      attribute RootNamespace { text }?,
      attribute SdkPath { text }?,
      attribute Sources { text }?,
      attribute StandardErrorImportance { text }?,
      attribute StandardOutputImportance { text }?,
      attribute TargetCompactFramework { boolean }?,
      attribute TargetType { text }?,
      attribute Timeout { text }?,
      attribute ToolExe { text }?,
      attribute ToolPath { text }?,
      attribute TreatWarningsAsErrors { boolean }?,
      attribute UseHostCompilerIfAvailable { boolean }?,
      attribute Utf8Output { boolean }?,
      attribute Verbosity { text }?,
      attribute WarningsAsErrors { text }?,
      attribute WarningsNotAsErrors { text }?,
      attribute Win32Icon { text }?,
      attribute Win32Manifest { text }?,
      attribute Win32Resource { text }?
   }

start |= VCBuild

VCBuild = 
   element VCBuild
   {
      TaskType,
      attribute AdditionalLibPaths { text }?,
      attribute AdditionalLinkLibraryPaths { text }?,
      attribute AdditionalOptions { text }?,
      attribute Clean { boolean }?,
      attribute Configuration { text }?,
      attribute Override { text }?,
      attribute Platform { text }?,
      attribute Projects { text },
      attribute Rebuild { boolean }?,
      attribute SolutionFile { text }?,
      attribute Timeout { text }?,
      attribute ToolPath { text }?,
      attribute UseEnvironment { boolean }?,
      attribute UserEnvironment { boolean }?
   }

start |= VerifyFileHash

VerifyFileHash = 
   element VerifyFileHash
   {
      TaskType,
      attribute File { text },
      attribute Hash { text },
      attribute HashEncoding { text }?,
      attribute Algorithm { text }?
   }

start |= Warning

Warning = 
   element Warning
   {
      TaskType,
      attribute Code { text }?,
      attribute File { text }?,
      attribute HelpKeyword { text }?,
      attribute Text { text }?
   }

start |= WcfConfigValidationEnabled

WcfConfigValidationEnabled = element WcfConfigValidationEnabled { boolean }

start |= WsdlXsdCodeGenCollectionTypes

WsdlXsdCodeGenCollectionTypes = 
   element WsdlXsdCodeGenCollectionTypes { StringPropertyType }

start |= WsdlXsdCodeGenEnabled

WsdlXsdCodeGenEnabled = element WsdlXsdCodeGenEnabled { boolean }

start |= WsdlXsdCodeGenEnableDataBinding

WsdlXsdCodeGenEnableDataBinding = 
   element WsdlXsdCodeGenEnableDataBinding { boolean }

start |= WsdlXsdCodeGenGenerateAsynchronousOperations

WsdlXsdCodeGenGenerateAsynchronousOperations = 
   element WsdlXsdCodeGenGenerateAsynchronousOperations { boolean }

start |= WsdlXsdCodeGenGenerateDataTypesOnly

WsdlXsdCodeGenGenerateDataTypesOnly = 
   element WsdlXsdCodeGenGenerateDataTypesOnly { boolean }

start |= WsdlXsdCodeGenGenerateInternalTypes

WsdlXsdCodeGenGenerateInternalTypes = 
   element WsdlXsdCodeGenGenerateInternalTypes { boolean }

start |= WsdlXsdCodeGenGenerateMessageContract

WsdlXsdCodeGenGenerateMessageContract = 
   element WsdlXsdCodeGenGenerateMessageContract { boolean }

start |= WsdlXsdCodeGenGenerateSerializableTypes

WsdlXsdCodeGenGenerateSerializableTypes = 
   element WsdlXsdCodeGenGenerateSerializableTypes { boolean }

start |= WsdlXsdCodeGenNamespaceMappings

WsdlXsdCodeGenNamespaceMappings = 
   element WsdlXsdCodeGenNamespaceMappings { StringPropertyType }

start |= WsdlXsdCodeGenImportXmlTypes

WsdlXsdCodeGenImportXmlTypes = element WsdlXsdCodeGenImportXmlTypes { boolean }

start |= WsdlXsdCodeGenReuseTypesFlag

WsdlXsdCodeGenReuseTypesFlag = element WsdlXsdCodeGenReuseTypesFlag { boolean }

start |= WsdlXsdCodeGenReuseTypesMode

WsdlXsdCodeGenReuseTypesMode = 
   element WsdlXsdCodeGenReuseTypesMode { "All" | "Partial" }

start |= WsdlXsdCodeGenSerializerMode

WsdlXsdCodeGenSerializerMode = 
   element WsdlXsdCodeGenSerializerMode
   {
      "XmlSerializer" | "DataContractSerializer"
   }

start |= WsdlXsdCodeGenUseSerializerForFaults

WsdlXsdCodeGenUseSerializerForFaults = 
   element WsdlXsdCodeGenUseSerializerForFaults { boolean }

start |= WsdlXsdCodeGenWrapped

WsdlXsdCodeGenWrapped = element WsdlXsdCodeGenWrapped { boolean }

start |= WriteCodeFragment

WriteCodeFragment = 
   element WriteCodeFragment
   {
      TaskType,
      attribute AssemblyAttributes { text }?,
      attribute Language { text },
      attribute OutputDirectory { text }?,
      attribute OutputFile { text }?
   }

start |= WriteLinesToFile

WriteLinesToFile = 
   element WriteLinesToFile
   {
      TaskType,
      attribute Encoding { text }?,
      attribute File { text },
      attribute Lines { text }?,
      attribute Overwrite { boolean }?,
      attribute WriteOnlyWhenDifferent { boolean }?
   }

start |= XslTransformation

XslTransformation = 
   element XslTransformation
   {
      TaskType,
      attribute OutputPaths { text },
      attribute Parameters { text }?,
      attribute XmlContent { text }?,
      attribute XmlInputPaths { text }?,
      attribute XslCompiledDllPath { text }?,
      attribute XslContent { text }?,
      attribute XslInputPath { text }?
   }

start |= CodeAnalysis

CodeAnalysis = 
   element CodeAnalysis
   {
      TaskType,
      attribute AlternativeToolName { text }?,
      attribute AnalysisTimeout { text }?,
      attribute ApplyLogFileXsl { boolean }?,
      attribute Assemblies { text }?,
      attribute ConsoleXsl { text }?,
      attribute Culture { text }?,
      attribute DependentAssemblyPaths { text }?,
      attribute Dictionaries { text }?,
      attribute FilesWritten { text }?,
      attribute ForceOutput { boolean }?,
      attribute GenerateSuccessFile { boolean }?,
      attribute IgnoreInvalidTargets { boolean }?,
      attribute IgnoreGeneratedCode { boolean }?,
      attribute Imports { text }?,
      attribute LogFile { text }?,
      attribute LogFileXsl { text }?,
      attribute OutputToConsole { boolean }?,
      attribute OverrideRuleVisibilities { boolean }?,
      attribute PlatformPath { text }?,
      attribute Project { text }?,
      attribute Quiet { boolean }?,
      attribute References { text }?,
      attribute RuleAssemblies { text }?,
      attribute Rules { text }?,
      attribute SaveMessagesToReport { text }?,
      attribute SearchGlobalAssemblyCache { boolean }?,
      attribute Summary { boolean }?,
      attribute SuccessFile { boolean }?,
      attribute Timeout { text }?,
      attribute TreatWarningsAsErrors { boolean }?,
      attribute ToolPath { text }?,
      attribute UpdateProject { boolean }?
   }

start |= CL

CL = 
   element CL
   {
      TaskType,
      attribute AcceptableNonZeroExitCodes { text }?,
      attribute ActiveToolSwitchesValues { text }?,
      attribute AdditionalIncludeDirectories { text }?,
      attribute AdditionalOptions { text }?,
      attribute AdditionalUsingDirectories { text }?,
      attribute AssemblerListingLocation { text }?,
      attribute AssemblerOutput { text }?,
      attribute BasicRuntimeChecks { text }?,
      attribute BrowseInformation { boolean }?,
      attribute BrowseInformationFile { text }?,
      attribute BufferSecurityCheck { boolean }?,
      attribute CallingConvention { text }?,
      attribute CompileAs { text }?,
      attribute CompileAsManaged { text }?,
      attribute CreateHotpatchableImage { boolean }?,
      attribute DebugInformationFormat { text }?,
      attribute DisableLanguageExtensions { boolean }?,
      attribute DisableSpecificWarnings { text }?,
      attribute EnableEnhancedInstructionSet { text }?,
      attribute EnableFiberSafeOptimizations { boolean }?,
      attribute EnablePREfast { boolean }?,
      attribute EnvironmentVariables { text }?,
      attribute ErrorReporting { text }?,
      attribute ExceptionHandling { text }?,
      attribute ExcludedInputPaths { text }?,
      attribute ExpandAttributedSource { boolean }?,
      attribute FavorSizeOrSpeed { text }?,
      attribute FloatingPointExceptions { boolean }?,
      attribute FloatingPointModel { text }?,
      attribute ForceConformanceInForLoopScope { boolean }?,
      attribute ForcedIncludeFiles { text }?,
      attribute ForcedUsingFiles { text }?,
      attribute FunctionLevelLinking { boolean }?,
      attribute GenerateXMLDocumentationFiles { boolean }?,
      attribute IgnoreStandardIncludePath { boolean }?,
      attribute InlineFunctionExpansion { text }?,
      attribute IntrinsicFunctions { boolean }?,
      attribute LogStandardErrorAsError { boolean }?,
      attribute MinimalRebuild { boolean }?,
      attribute MinimalRebuildFromTracking { boolean }?,
      attribute MultiProcessorCompilation { boolean }?,
      attribute ObjectFileName { text }?,
      attribute ObjectFiles { text }?,
      attribute OmitDefaultLibName { boolean }?,
      attribute OmitFramePointers { boolean }?,
      attribute OpenMPSupport { boolean }?,
      attribute Optimization { text }?,
      attribute PathOverride { text }?,
      attribute PrecompiledHeader { text }?,
      attribute PrecompiledHeaderFile { text }?,
      attribute PrecompiledHeaderOutputFile { text }?,
      attribute PreprocessKeepComments { boolean }?,
      attribute PreprocessorDefinitions { text }?,
      attribute PreprocessOutput { text }?,
      attribute PreprocessSuppressLineNumbers { boolean }?,
      attribute PreprocessToFile { boolean }?,
      attribute ProcessorNumber { text }?,
      attribute ProgramDataBaseFileName { text }?,
      attribute RuntimeLibrary { text }?,
      attribute RuntimeTypeInfo { boolean }?,
      attribute ShowIncludes { boolean }?,
      attribute SkippedExecution { boolean }?,
      attribute SmallerTypeCheck { boolean }?,
      attribute Sources { text },
      attribute SourcesCompiled { text }?,
      attribute StandardErrorImportance { text }?,
      attribute StandardOutputImportance { text }?,
      attribute StringPooling { boolean }?,
      attribute StructMemberAlignment { text }?,
      attribute SuppressStartupBanner { boolean }?,
      attribute Timeout { text }?,
      attribute TLogReadFiles { text }?,
      attribute TLogWriteFiles { text }?,
      attribute ToolExe { text }?,
      attribute ToolPath { text }?,
      attribute TrackedInputFilesToIgnore { text }?,
      attribute TrackedOutputFilesToIgnore { text }?,
      attribute TrackerLogDirectory { text }?,
      attribute TrackFileAccess { boolean }?,
      attribute TreatSpecificWarningsAsErrors { text }?,
      attribute TreatWarningAsError { boolean }?,
      attribute TreatWChar_tAsBuiltInType { boolean }?,
      attribute UndefineAllPreprocessorDefinitions { boolean }?,
      attribute UndefinePreprocessorDefinitions { text }?,
      attribute UseFullPaths { boolean }?,
      attribute UseUnicodeForAssemblerListing { boolean }?,
      attribute WarningLevel { text }?,
      attribute WholeProgramOptimization { boolean }?,
      attribute XMLDocumentationFileName { text }?
   }

start |= Link

Link = 
   element Link
   {
      TaskType,
      attribute AcceptableNonZeroExitCodes { text }?,
      attribute ActiveToolSwitchesValues { text }?,
      attribute AdditionalDependencies { text }?,
      attribute AdditionalLibraryDirectories { text }?,
      attribute AdditionalManifestDependencies { text }?,
      attribute AdditionalOptions { text }?,
      attribute AddModuleNamesToAssembly { text }?,
      attribute AllowIsolation { boolean }?,
      attribute AssemblyDebug { boolean }?,
      attribute AssemblyLinkResource { text }?,
      attribute BaseAddress { text }?,
      attribute CLRImageType { text }?,
      attribute CLRSupportLastError { text }?,
      attribute CLRThreadAttribute { text }?,
      attribute CLRUnmanagedCodeCheck { boolean }?,
      attribute CreateHotPatchableImage { text }?,
      attribute DataExecutionPrevention { boolean }?,
      attribute DelayLoadDLLs { text }?,
      attribute DelaySign { boolean }?,
      attribute Driver { text }?,
      attribute EmbedManagedResourceFile { text }?,
      attribute EnableCOMDATFolding { boolean }?,
      attribute EnableUAC { boolean }?,
      attribute EntryPointSymbol { text }?,
      attribute EnvironmentVariables { text }?,
      attribute ExcludedInputPaths { text }?,
      attribute FixedBaseAddress { boolean }?,
      attribute ForceFileOutput { text }?,
      attribute ForceSymbolReferences { text }?,
      attribute FunctionOrder { text }?,
      attribute GenerateDebugInformation { boolean }?,
      attribute GenerateManifest { boolean }?,
      attribute GenerateMapFile { boolean }?,
      attribute HeapCommitSize { text }?,
      attribute HeapReserveSize { text }?,
      attribute IgnoreAllDefaultLibraries { boolean }?,
      attribute IgnoreEmbeddedIDL { boolean }?,
      attribute IgnoreImportLibrary { boolean }?,
      attribute IgnoreSpecificDefaultLibraries { text }?,
      attribute ImageHasSafeExceptionHandlers { boolean }?,
      attribute ImportLibrary { text }?,
      attribute KeyContainer { text }?,
      attribute KeyFile { text }?,
      attribute LargeAddressAware { boolean }?,
      attribute LinkDLL { boolean }?,
      attribute LinkErrorReporting { text }?,
      attribute LinkIncremental { boolean }?,
      attribute LinkLibraryDependencies { boolean }?,
      attribute LinkStatus { boolean }?,
      attribute LinkTimeCodeGeneration { text }?,
      attribute LogStandardErrorAsError { boolean }?,
      attribute ManifestFile { text }?,
      attribute MapExports { boolean }?,
      attribute MapFileName { text }?,
      attribute MergedIDLBaseFileName { text }?,
      attribute MergeSections { text }?,
      attribute MidlCommandFile { text }?,
      attribute MinimalRebuildFromTracking { boolean }?,
      attribute MinimumRequiredVersion { text }?,
      attribute ModuleDefinitionFile { text }?,
      attribute MSDOSStubFileName { text }?,
      attribute NoEntryPoint { boolean }?,
      attribute ObjectFiles { text }?,
      attribute OptimizeReferences { boolean }?,
      attribute OutputFile { text }?,
      attribute PathOverride { text }?,
      attribute PerUserRedirection { boolean }?,
      attribute PreprocessOutput { text }?,
      attribute PreventDllBinding { boolean }?,
      attribute Profile { boolean }?,
      attribute ProfileGuidedDatabase { text }?,
      attribute ProgramDatabaseFile { text }?,
      attribute RandomizedBaseAddress { boolean }?,
      attribute RegisterOutput { boolean }?,
      attribute SectionAlignment { text }?,
      attribute SetChecksum { boolean }?,
      attribute ShowProgress { text }?,
      attribute SkippedExecution { boolean }?,
      attribute Sources { text },
      attribute SourcesCompiled { text }?,
      attribute SpecifySectionAttributes { text }?,
      attribute StackCommitSize { text }?,
      attribute StackReserveSize { text }?,
      attribute StandardErrorImportance { text }?,
      attribute StandardOutputImportance { text }?,
      attribute StripPrivateSymbols { text }?,
      attribute SubSystem { text }?,
      attribute SupportNobindOfDelayLoadedDLL { boolean }?,
      attribute SupportUnloadOfDelayLoadedDLL { boolean }?,
      attribute SuppressStartupBanner { boolean }?,
      attribute SwapRunFromCD { boolean }?,
      attribute SwapRunFromNET { boolean }?,
      attribute TargetMachine { text }?,
      attribute TerminalServerAware { boolean }?,
      attribute Timeout { text }?,
      attribute TLogReadFiles { text }?,
      attribute TLogWriteFiles { text }?,
      attribute ToolExe { text }?,
      attribute ToolPath { text }?,
      attribute TrackedInputFilesToIgnore { text }?,
      attribute TrackedOutputFilesToIgnore { text }?,
      attribute TrackerLogDirectory { text }?,
      attribute TrackFileAccess { boolean }?,
      attribute TreatLinkerWarningAsErrors { boolean }?,
      attribute TurnOffAssemblyGeneration { boolean }?,
      attribute TypeLibraryFile { text }?,
      attribute TypeLibraryResourceID { text }?,
      attribute UACExecutionLevel { text }?,
      attribute UACUIAccess { boolean }?,
      attribute UseLibraryDependencyInputs { boolean }?,
      attribute Version { text }?
   }

start |= BSCMake

BSCMake = 
   element BSCMake
   {
      TaskType,
      attribute AcceptableNonZeroExitCodes { text }?,
      attribute ActiveToolSwitchesValues { text }?,
      attribute AdditionalOptions { text }?,
      attribute EnvironmentVariables { text }?,
      attribute ExcludedInputPaths { text }?,
      attribute LogStandardErrorAsError { boolean }?,
      attribute MinimalRebuildFromTracking { boolean }?,
      attribute OutputFile { text }?,
      attribute PathOverride { text }?,
      attribute SkippedExecution { boolean }?,
      attribute Sources { text }?,
      attribute SourcesCompiled { text }?,
      attribute StandardErrorImportance { text }?,
      attribute StandardOutputImportance { text }?,
      attribute SuppressStartupBanner { boolean }?,
      attribute Timeout { text }?,
      attribute TLogReadFiles { text }?,
      attribute TLogWriteFiles { text }?,
      attribute ToolExe { text }?,
      attribute ToolPath { text }?,
      attribute TrackedInputFilesToIgnore { text }?,
      attribute TrackedOutputFilesToIgnore { text }?,
      attribute TrackerLogDirectory { text }?,
      attribute TrackFileAccess { boolean }?
   }

start |= CPPClean

CPPClean = 
   element CPPClean
   {
      TaskType,
      attribute DeletedFiles { text }?,
      attribute DoDelete { boolean }?,
      attribute FilePatternsToDeleteOnClean { text },
      attribute FilesExcludedFromClean { text }?,
      attribute FoldersToClean { text }
   }

start |= GetOutputFileName

GetOutputFileName = 
   element GetOutputFileName
   {
      TaskType,
      attribute OutputExtension { text },
      attribute OutputFile { text }?,
      attribute OutputPath { text }?,
      attribute SourceFile { text }
   }

start |= IsAssembly

IsAssembly = 
   element IsAssembly
   {
      TaskType,
      attribute Assemblies { text }?,
      attribute AssemblyFiles { text }
   }

start |= LIB

LIB = 
   element LIB
   {
      TaskType,
      attribute AcceptableNonZeroExitCodes { text }?,
      attribute ActiveToolSwitchesValues { text }?,
      attribute AdditionalDependencies { text }?,
      attribute AdditionalLibraryDirectories { text }?,
      attribute AdditionalOptions { text }?,
      attribute DisplayLibrary { text }?,
      attribute EnvironmentVariables { text }?,
      attribute ErrorReporting { text }?,
      attribute ExcludedInputPaths { text }?,
      attribute ExportNamedFunctions { text }?,
      attribute ForceSymbolReferences { text }?,
      attribute IgnoreAllDefaultLibraries { boolean }?,
      attribute IgnoreSpecificDefaultLibraries { text }?,
      attribute LinkLibraryDependencies { boolean }?,
      attribute LinkTimeCodeGeneration { boolean }?,
      attribute LogStandardErrorAsError { boolean }?,
      attribute MinimalRebuildFromTracking { boolean }?,
      attribute MinimumRequiredVersion { text }?,
      attribute ModuleDefinitionFile { text }?,
      attribute OutputFile { text }?,
      attribute PathOverride { text }?,
      attribute RemoveObjects { text }?,
      attribute SkippedExecution { boolean }?,
      attribute Sources { text },
      attribute SourcesCompiled { text }?,
      attribute StandardErrorImportance { text }?,
      attribute StandardOutputImportance { text }?,
      attribute SubSystem { text }?,
      attribute SuppressStartupBanner { boolean }?,
      attribute TargetMachine { text }?,
      attribute Timeout { text }?,
      attribute TLogReadFiles { text }?,
      attribute TLogWriteFiles { text }?,
      attribute ToolExe { text }?,
      attribute ToolPath { text }?,
      attribute TrackedInputFilesToIgnore { text }?,
      attribute TrackedOutputFilesToIgnore { text }?,
      attribute TrackerLogDirectory { text }?,
      attribute TrackFileAccess { boolean }?,
      attribute TreatLibWarningAsErrors { boolean }?,
      attribute UseUnicodeResponseFiles { boolean }?,
      attribute Verbose { boolean }?
   }

start |= MIDL

MIDL = 
   element MIDL
   {
      TaskType,
      attribute AcceptableNonZeroExitCodes { text }?,
      attribute ActiveToolSwitchesValues { text }?,
      attribute AdditionalIncludeDirectories { text }?,
      attribute AdditionalOptions { text }?,
      attribute ApplicationConfigurationMode { boolean }?,
      attribute ClientStubFile { text }?,
      attribute CPreprocessOptions { text }?,
      attribute DefaultCharType { text }?,
      attribute DllDataFileName { text }?,
      attribute EnableErrorChecks { text }?,
      attribute EnvironmentVariables { text }?,
      attribute ErrorCheckAllocations { boolean }?,
      attribute ErrorCheckBounds { boolean }?,
      attribute ErrorCheckEnumRange { boolean }?,
      attribute ErrorCheckRefPointers { boolean }?,
      attribute ErrorCheckStubData { boolean }?,
      attribute ExcludedInputPaths { text }?,
      attribute GenerateClientFiles { text }?,
      attribute GenerateServerFiles { text }?,
      attribute GenerateStublessProxies { boolean }?,
      attribute GenerateTypeLibrary { boolean }?,
      attribute HeaderFileName { text }?,
      attribute IgnoreStandardIncludePath { boolean }?,
      attribute InterfaceIdentifierFileName { text }?,
      attribute LocaleID { text }?,
      attribute LogStandardErrorAsError { boolean }?,
      attribute MinimalRebuildFromTracking { boolean }?,
      attribute MkTypLibCompatible { boolean }?,
      attribute OutputDirectory { text }?,
      attribute PathOverride { text }?,
      attribute PreprocessorDefinitions { text }?,
      attribute ProxyFileName { text }?,
      attribute RedirectOutputAndErrors { text }?,
      attribute ServerStubFile { text }?,
      attribute SkippedExecution { boolean }?,
      attribute Source { text },
      attribute SourcesCompiled { text }?,
      attribute StandardErrorImportance { text }?,
      attribute StandardOutputImportance { text }?,
      attribute StructMemberAlignment { text }?,
      attribute SuppressCompilerWarnings { boolean }?,
      attribute SuppressStartupBanner { boolean }?,
      attribute TargetEnvironment { text }?,
      attribute Timeout { text }?,
      attribute TLogReadFiles { text }?,
      attribute TLogWriteFiles { text }?,
      attribute ToolExe { text }?,
      attribute ToolPath { text }?,
      attribute TrackedInputFilesToIgnore { text }?,
      attribute TrackedOutputFilesToIgnore { text }?,
      attribute TrackerLogDirectory { text }?,
      attribute TrackFileAccess { boolean }?,
      attribute TypeLibFormat { text }?,
      attribute TypeLibraryName { text }?,
      attribute UndefinePreprocessorDefinitions { text }?,
      attribute ValidateAllParameters { boolean }?,
      attribute WarnAsError { boolean }?,
      attribute WarningLevel { text }?
   }

start |= Mt

Mt = 
   element Mt
   {
      TaskType,
      attribute AcceptableNonZeroExitCodes { text }?,
      attribute ActiveToolSwitchesValues { text }?,
      attribute AdditionalManifestFiles { text }?,
      attribute AdditionalOptions { text }?,
      attribute AssemblyIdentity { text }?,
      attribute ComponentFileName { text }?,
      attribute EmbedManifest { boolean }?,
      attribute EnvironmentVariables { text }?,
      attribute ExcludedInputPaths { text }?,
      attribute GenerateCatalogFiles { boolean }?,
      attribute GenerateCategoryTags { boolean }?,
      attribute InputResourceManifests { text }?,
      attribute LogStandardErrorAsError { boolean }?,
      attribute ManifestFromManagedAssembly { text }?,
      attribute MinimalRebuildFromTracking { boolean }?,
      attribute OutputManifestFile { text }?,
      attribute OutputResourceManifests { text }?,
      attribute PathOverride { text }?,
      attribute RegistrarScriptFile { text }?,
      attribute ReplacementsFile { text }?,
      attribute ResourceOutputFileName { text }?,
      attribute SkippedExecution { boolean }?,
      attribute Sources { text }?,
      attribute SourcesCompiled { text }?,
      attribute StandardErrorImportance { text }?,
      attribute StandardOutputImportance { text }?,
      attribute SuppressDependencyElement { boolean }?,
      attribute SuppressStartupBanner { boolean }?,
      attribute Timeout { text }?,
      attribute TLogReadFiles { text }?,
      attribute TLogWriteFiles { text }?,
      attribute ToolExe { text }?,
      attribute ToolPath { text }?,
      attribute TrackedInputFilesToIgnore { text }?,
      attribute TrackedOutputFilesToIgnore { text }?,
      attribute TrackerLogDirectory { text }?,
      attribute TrackFileAccess { boolean }?,
      attribute TypeLibraryFile { text }?,
      attribute UpdateFileHashes { boolean }?,
      attribute UpdateFileHashesSearchPath { text }?,
      attribute VerboseOutput { boolean }?
   }

start |= RC

RC = 
   element RC
   {
      TaskType,
      attribute AcceptableNonZeroExitCodes { text }?,
      attribute ActiveToolSwitchesValues { text }?,
      attribute AdditionalIncludeDirectories { text }?,
      attribute AdditionalOptions { text }?,
      attribute Culture { text }?,
      attribute EnvironmentVariables { text }?,
      attribute ExcludedInputPaths { text }?,
      attribute IgnoreStandardIncludePath { boolean }?,
      attribute LogStandardErrorAsError { boolean }?,
      attribute MinimalRebuildFromTracking { boolean }?,
      attribute NullTerminateStrings { boolean }?,
      attribute PathOverride { text }?,
      attribute PreprocessorDefinitions { text }?,
      attribute ResourceOutputFileName { text }?,
      attribute ShowProgress { boolean }?,
      attribute SkippedExecution { boolean }?,
      attribute Source { text },
      attribute SourcesCompiled { text }?,
      attribute StandardErrorImportance { text }?,
      attribute StandardOutputImportance { text }?,
      attribute Timeout { text }?,
      attribute TLogReadFiles { text }?,
      attribute TLogWriteFiles { text }?,
      attribute ToolExe { text }?,
      attribute ToolPath { text }?,
      attribute TrackedInputFilesToIgnore { text }?,
      attribute TrackedOutputFilesToIgnore { text }?,
      attribute TrackerLogDirectory { text }?,
      attribute TrackFileAccess { boolean }?,
      attribute UndefinePreprocessorDefinitions { text }?
   }

start |= SetEnv

SetEnv = 
   element SetEnv
   {
      TaskType,
      attribute Prefix { boolean },
      attribute Target { text }?,
      attribute Value { text }?
   }

start |= XDCMake

XDCMake = 
   element XDCMake
   {
      TaskType,
      attribute AcceptableNonZeroExitCodes { text }?,
      attribute ActiveToolSwitchesValues { text }?,
      attribute AdditionalDocumentFile { text }?,
      attribute AdditionalOptions { text }?,
      attribute DocumentLibraryDependencies { boolean }?,
      attribute EnvironmentVariables { text }?,
      attribute ExcludedInputPaths { text }?,
      attribute LogStandardErrorAsError { boolean }?,
      attribute MinimalRebuildFromTracking { boolean }?,
      attribute OutputFile { text }?,
      attribute PathOverride { text }?,
      attribute ProjectName { text }?,
      attribute SkippedExecution { boolean }?,
      attribute SlashOld { boolean }?,
      attribute Sources { text },
      attribute SourcesCompiled { text }?,
      attribute StandardErrorImportance { text }?,
      attribute StandardOutputImportance { text }?,
      attribute SuppressStartupBanner { boolean }?,
      attribute Timeout { text }?,
      attribute TLogReadFiles { text }?,
      attribute TLogWriteFiles { text }?,
      attribute ToolExe { text }?,
      attribute ToolPath { text }?,
      attribute TrackedInputFilesToIgnore { text }?,
      attribute TrackedOutputFilesToIgnore { text }?,
      attribute TrackerLogDirectory { text }?,
      attribute TrackFileAccess { boolean }?
   }

start |= XSD

XSD = 
   element XSD
   {
      TaskType,
      attribute AcceptableNonZeroExitCodes { text }?,
      attribute ActiveToolSwitchesValues { text }?,
      attribute AdditionalOptions { text }?,
      attribute EnvironmentVariables { text }?,
      attribute ExcludedInputPaths { text }?,
      attribute GenerateFromSchema { text }?,
      attribute Language { text }?,
      attribute LogStandardErrorAsError { boolean }?,
      attribute MinimalRebuildFromTracking { boolean }?,
      attribute Namespace { text }?,
      attribute PathOverride { text }?,
      attribute SkippedExecution { boolean }?,
      attribute Sources { text },
      attribute SourcesCompiled { text }?,
      attribute StandardErrorImportance { text }?,
      attribute StandardOutputImportance { text }?,
      attribute SuppressStartupBanner { boolean }?,
      attribute Timeout { text }?,
      attribute TLogReadFiles { text }?,
      attribute TLogWriteFiles { text }?,
      attribute ToolExe { text }?,
      attribute ToolPath { text }?,
      attribute TrackedInputFilesToIgnore { text }?,
      attribute TrackedOutputFilesToIgnore { text }?,
      attribute TrackerLogDirectory { text }?,
      attribute TrackFileAccess { boolean }?
   }

start |= VCMessage

VCMessage = 
   element VCMessage
   {
      TaskType,
      attribute Code { text },
      attribute Type { text }?,
      attribute Arguments { text }?
   }

start |= DefaultLanguage

DefaultLanguage = 
   element DefaultLanguage
   {
      StringPropertyType
      >>
      a:documentation [ """Default resource language. """ ]
   }

start |= PackageCertificateKeyFile

PackageCertificateKeyFile = 
   element PackageCertificateKeyFile
   {
      StringPropertyType
      >>
      a:documentation [ """App package certificate key file. """ ]
   }

start |= AppxAutoIncrementPackageRevision

AppxAutoIncrementPackageRevision = 
   element AppxAutoIncrementPackageRevision
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Flag indicating whether to auto-increment package revision.
        """
      ]
   }

start |= AppxMSBuildToolsPath

AppxMSBuildToolsPath = 
   element AppxMSBuildToolsPath
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Full path to a folder containing packaging build targets and tasks assembly.
        """
      ]
   }

start |= AppxMSBuildTaskAssembly

AppxMSBuildTaskAssembly = 
   element AppxMSBuildTaskAssembly
   {
      StringPropertyType
      >>
      a:documentation [ """Full path to packaging build tasks assembly. """ ]
   }

start |= AppxPackage

AppxPackage = 
   element AppxPackage
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Flag marking current project as capable of being packaged as an app package.
        """
      ]
   }

start |= AppxUseHardlinksIfPossible

AppxUseHardlinksIfPossible = 
   element AppxUseHardlinksIfPossible
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Flag indicating whether to use hard links if possible when copying files during creation of app packages.
        """
      ]
   }

start |= AppxSkipUnchangedFiles

AppxSkipUnchangedFiles = 
   element AppxSkipUnchangedFiles
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Flag indicating whether to skip unchanged files when copying files during creation of app packages.
        """
      ]
   }

start |= AppxGeneratePriEnabled

AppxGeneratePriEnabled = 
   element AppxGeneratePriEnabled
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Flag indicating whether to generate resource index files (PRI files) during packaging.
        """
      ]
   }

start |= AppxPackageSigningEnabled

AppxPackageSigningEnabled = 
   element AppxPackageSigningEnabled
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Flag indicating whether to enable signing of app packages.
        """
      ]
   }

start |= AppxPackageSigningTimestampServerUrl

AppxPackageSigningTimestampServerUrl = 
   element AppxPackageSigningTimestampServerUrl
   {
      StringPropertyType
      >>
      a:documentation [ """RFC 3161 timestamp server's URL. """ ]
   }

start |= AppxPackageSigningTimestampDigestAlgorithm

AppxPackageSigningTimestampDigestAlgorithm = 
   element AppxPackageSigningTimestampDigestAlgorithm
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Digest algorithm used by the RFC 3161 timestamp server.
        """
      ]
   }

start |= AppxPackageIncludePrivateSymbols

AppxPackageIncludePrivateSymbols = 
   element AppxPackageIncludePrivateSymbols
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Flag indicating whether to include private symbols in symbol packages.
        """
      ]
   }

start |= AppxSymbolPackageEnabled

AppxSymbolPackageEnabled = 
   element AppxSymbolPackageEnabled
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Flag indicating whether to generate a symbol package when an app package is created.
        """
      ]
   }

start |= AppxTestLayoutEnabled

AppxTestLayoutEnabled = 
   element AppxTestLayoutEnabled
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Flag indicating whether to create test layout when an app package is created.
        """
      ]
   }

start |= AppxPackageValidationEnabled

AppxPackageValidationEnabled = 
   element AppxPackageValidationEnabled
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Flag indicating whether to enable validation of app packages.
        """
      ]
   }

start |= AppxHarvestWinmdRegistration

AppxHarvestWinmdRegistration = 
   element AppxHarvestWinmdRegistration
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Flag indicating whether to enable harvesting of WinMD registration information.
        """
      ]
   }

start |= AppxWinMdCacheEnabled

AppxWinMdCacheEnabled = 
   element AppxWinMdCacheEnabled
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Flag indicating whether to cache the harvested WinMD registration information.
        """
      ]
   }

start |= AppxWinMdCacheDir

AppxWinMdCacheDir = 
   element AppxWinMdCacheDir
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Path to the folder where harvested WinMD registration information will be cached.
        """
      ]
   }

start |= EnableSigningChecks

EnableSigningChecks = 
   element EnableSigningChecks
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Flag indicating whether to enable signing checks during app package generation.
        """
      ]
   }

start |= AppxStrictManifestValidationEnabled

AppxStrictManifestValidationEnabled = 
   element AppxStrictManifestValidationEnabled
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Flag indicating whether to enable strict manifest validation.
        """
      ]
   }

start |= AppxFilterOutUnusedLanguagesResourceFileMaps

AppxFilterOutUnusedLanguagesResourceFileMaps = 
   element AppxFilterOutUnusedLanguagesResourceFileMaps
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Flag indicating whether to filter out unused language resource file maps.
        """
      ]
   }

start |= AppxOSMinVersion

AppxOSMinVersion = 
   element AppxOSMinVersion
   {
      StringPropertyType
      >>
      a:documentation [ """Targeted minimum OS version. """ ]
   }

start |= AppxOSMaxVersionTested

AppxOSMaxVersionTested = 
   element AppxOSMaxVersionTested
   {
      StringPropertyType
      >>
      a:documentation [ """Targeted maximum OS version tested. """ ]
   }

start |= AppxPackageDirName

AppxPackageDirName = 
   element AppxPackageDirName
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Name of the folder where app packages are produced.
        """
      ]
   }

start |= PlatformSpecificBundleArtifactsListDirName

PlatformSpecificBundleArtifactsListDirName = 
   element PlatformSpecificBundleArtifactsListDirName
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Name of the folder where platform-specific bundle artifact lists are stored.
        """
      ]
   }

start |= AppxPackageDir

AppxPackageDir = 
   element AppxPackageDir
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Full path to a folder where app packages will be saved.
        """
      ]
   }

start |= AppxPackageArtifactsDir

AppxPackageArtifactsDir = 
   element AppxPackageArtifactsDir
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Additional qualifier to append to AppxPackageDir.
        """
      ]
   }

start |= FinalAppxManifestName

FinalAppxManifestName = 
   element FinalAppxManifestName
   {
      StringPropertyType
      >>
      a:documentation [ """Path to the final app manifest. """ ]
   }

start |= AppxValidateAppxManifest

AppxValidateAppxManifest = 
   element AppxValidateAppxManifest
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Flag indicating whether to validate app manifest.
        """
      ]
   }

start |= MakePriExeFullPath

MakePriExeFullPath = 
   element MakePriExeFullPath
   {
      StringPropertyType
      >>
      a:documentation [ """Full path to makepri.exe utility. """ ]
   }

start |= MakeAppxExeFullPath

MakeAppxExeFullPath = 
   element MakeAppxExeFullPath
   {
      StringPropertyType
      >>
      a:documentation [ """Full path to makeappx.exe utility. """ ]
   }

start |= SignAppxPackageExeFullPath

SignAppxPackageExeFullPath = 
   element SignAppxPackageExeFullPath
   {
      StringPropertyType
      >>
      a:documentation [ """Full path to signtool.exe utility. """ ]
   }

start |= ResgenToolPath

ResgenToolPath = 
   element ResgenToolPath
   {
      StringPropertyType
      >>
      a:documentation [ """Full path to a folder containing resgen tool. """ ]
   }

start |= PdbCopyExeFullPath

PdbCopyExeFullPath = 
   element PdbCopyExeFullPath
   {
      StringPropertyType
      >>
      a:documentation [ """Full path to pdbcopy.exe utility. """ ]
   }

start |= AppxSymbolStrippedDir

AppxSymbolStrippedDir = 
   element AppxSymbolStrippedDir
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Full path to a directory where stripped PDBs will be stored.
        """
      ]
   }

start |= AppxPrependPriInitialPath

AppxPrependPriInitialPath = 
   element AppxPrependPriInitialPath
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Flag indicating whether to enable prepending initial path when indexing RESW and RESJSON files in class libraries.
        """
      ]
   }

start |= AppxPriInitialPath

AppxPriInitialPath = 
   element AppxPriInitialPath
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Initial path when indexing RESW and RESJSON files in class libraries.
        """
      ]
   }

start |= ProjectPriFileName

ProjectPriFileName = 
   element ProjectPriFileName
   {
      StringPropertyType
      >>
      a:documentation
      [
         """File name to use for project-specific resource index file (PRI).
        """
      ]
   }

start |= ProjectPriFullPath

ProjectPriFullPath = 
   element ProjectPriFullPath
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Full path to project-specific resource index file (PRI).
        """
      ]
   }

start |= AppxPackageRecipe

AppxPackageRecipe = 
   element AppxPackageRecipe
   {
      StringPropertyType
      >>
      a:documentation [ """Full path to the app package recipe. """ ]
   }

start |= FinalAppxPackageRecipe

FinalAppxPackageRecipe = 
   element FinalAppxPackageRecipe
   {
      StringPropertyType
      >>
      a:documentation [ """Full path to the final app package recipe. """ ]
   }

start |= AllowLocalNetworkLoopback

AllowLocalNetworkLoopback = 
   element AllowLocalNetworkLoopback
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Flag indicating whether to allow local network loopback.
        """
      ]
   }

start |= AppxDefaultHashAlgorithmId

AppxDefaultHashAlgorithmId = 
   element AppxDefaultHashAlgorithmId
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Default hash algorithm ID, used for signing an app package.
        """
      ]
   }

start |= AppxPackageFileMap

AppxPackageFileMap = 
   element AppxPackageFileMap
   {
      StringPropertyType
      >>
      a:documentation [ """Full path to app package file map. """ ]
   }

start |= LayoutDir

LayoutDir = 
   element LayoutDir
   {
      StringPropertyType
      >>
      a:documentation [ """Full path to a folder with package layout. """ ]
   }

start |= ManagedWinmdInprocImplementation

ManagedWinmdInprocImplementation = 
   element ManagedWinmdInprocImplementation
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Name of the binary containing managed WinMD in-proc implementation.
        """
      ]
   }

start |= UseIncrementalAppxRegistration

UseIncrementalAppxRegistration = 
   element UseIncrementalAppxRegistration
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Flag indicating whether to enable incremental registration of the app layout.
        """
      ]
   }

start |= AppxPackagingInfoFile

AppxPackagingInfoFile = 
   element AppxPackagingInfoFile
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Full path to the packaging info file which will contain paths to produced packages.
        """
      ]
   }

start |= AppxOSMinVersionReplaceManifestVersion

AppxOSMinVersionReplaceManifestVersion = 
   element AppxOSMinVersionReplaceManifestVersion
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Flag indicating whether minimum OS version in app manifest should be replaced.
        """
      ]
   }

start |= AppxOSMaxVersionTestedReplaceManifestVersion

AppxOSMaxVersionTestedReplaceManifestVersion = 
   element AppxOSMaxVersionTestedReplaceManifestVersion
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Flag indicating whether maximum OS version tested in app manifest should be replaced.
        """
      ]
   }

start |= PackagingFileWritesLogPath

PackagingFileWritesLogPath = 
   element PackagingFileWritesLogPath
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Full path to a text file containing packaging file writes log.
        """
      ]
   }

start |= PackagingDirectoryWritesLogPath

PackagingDirectoryWritesLogPath = 
   element PackagingDirectoryWritesLogPath
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Full path to a text file containing packaging directory writes log.
        """
      ]
   }

start |= AppxCopyLocalFilesOutputGroupIncludeXmlFiles

AppxCopyLocalFilesOutputGroupIncludeXmlFiles = 
   element AppxCopyLocalFilesOutputGroupIncludeXmlFiles
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Flag indicating whether CopyLocal files group should include XML files.
        """
      ]
   }

start |= AppxDefaultResourceQualifiers

AppxDefaultResourceQualifiers = 
   element AppxDefaultResourceQualifiers
   {
      StringPropertyType
      >>
      a:documentation
      [
         """'|'-delimited list of key=value pairs representing default resource qualifiers.
        """
      ]
   }

start |= AppxPriConfigXmlPackagingSnippetPath

AppxPriConfigXmlPackagingSnippetPath = 
   element AppxPriConfigXmlPackagingSnippetPath
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Path to an XML file containing packaging element for priconfi.xml file.
        """
      ]
   }

start |= AppxPriConfigXmlDefaultSnippetPath

AppxPriConfigXmlDefaultSnippetPath = 
   element AppxPriConfigXmlDefaultSnippetPath
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Path to an XML file containing default element for priconfi.xml file.
        """
      ]
   }

start |= TargetPlatformSdkRootOverride

TargetPlatformSdkRootOverride = 
   element TargetPlatformSdkRootOverride
   {
      StringPropertyType
      >>
      a:documentation [ """Full path to platform SDK root. """ ]
   }

start |= AppxBundle

AppxBundle = 
   element AppxBundle
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Flag indicating whether packaging targets will produce an app bundle.
        """
      ]
   }

start |= AppxBundlePlatforms

AppxBundlePlatforms = 
   element AppxBundlePlatforms
   {
      StringPropertyType
      >>
      a:documentation
      [
         """'|'-delimited list of platforms which will be included in an app bundle.
        """
      ]
   }

start |= AppxBundleProducingPlatform

AppxBundleProducingPlatform = 
   element AppxBundleProducingPlatform
   {
      StringPropertyType
      >>
      a:documentation
      [
         """A platform which will be used to produce an app bundle.
        """
      ]
   }

start |= AppxBundleResourcePacksProducingPlatform

AppxBundleResourcePacksProducingPlatform = 
   element AppxBundleResourcePacksProducingPlatform
   {
      StringPropertyType
      >>
      a:documentation
      [
         """A platform which will be used to produce resource packs for an app bundle.
        """
      ]
   }

start |= AppxLayoutFolderName

AppxLayoutFolderName = 
   element AppxLayoutFolderName
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Name of the folder where package layout will be prepared when producing an app bundle.
        """
      ]
   }

start |= AppxLayoutDir

AppxLayoutDir = 
   element AppxLayoutDir
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Full path to the folder where package layout will be prepared when producing an app bundle.
        """
      ]
   }

start |= AppxBundlePriConfigXmlForSplittingFileName

AppxBundlePriConfigXmlForSplittingFileName = 
   element AppxBundlePriConfigXmlForSplittingFileName
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Full path to the priconfig.xml file used for splitting resource packs.
        """
      ]
   }

start |= AppxBundleAutoResourcePackageQualifiers

AppxBundleAutoResourcePackageQualifiers = 
   element AppxBundleAutoResourcePackageQualifiers
   {
      StringPropertyType
      >>
      a:documentation
      [
         """'|'-delimited list of resource qualifiers which will be used for automatic resource pack splitting.
        """
      ]
   }

start |= AppxBundleSplitResourcesPriPrefix

AppxBundleSplitResourcesPriPrefix = 
   element AppxBundleSplitResourcesPriPrefix
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Prefix used for split resources .pri and .map.txt files.
        """
      ]
   }

start |= AppxBundleSplitResourcesPriPath

AppxBundleSplitResourcesPriPath = 
   element AppxBundleSplitResourcesPriPath
   {
      StringPropertyType
      >>
      a:documentation [ """Full path to split resources .pri file. """ ]
   }

start |= AppxBundleSplitResourcesGeneratedFilesListPath

AppxBundleSplitResourcesGeneratedFilesListPath = 
   element AppxBundleSplitResourcesGeneratedFilesListPath
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Full path to a log file containing a list of generated files during resource splitting.
        """
      ]
   }

start |= AppxBundleSplitResourcesQualifiersPath

AppxBundleSplitResourcesQualifiersPath = 
   element AppxBundleSplitResourcesQualifiersPath
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Full path to a log file containing a detected qualifiers during resource splitting.
        """
      ]
   }

start |= AppxBundlePriConfigXmlForMainPackageFileMapFileName

AppxBundlePriConfigXmlForMainPackageFileMapFileName = 
   element AppxBundlePriConfigXmlForMainPackageFileMapFileName
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Full path to the priconfig.xml file used for generating main package file map.
        """
      ]
   }

start |= AppxBundleMainPackageFileMapIntermediatePrefix

AppxBundleMainPackageFileMapIntermediatePrefix = 
   element AppxBundleMainPackageFileMapIntermediatePrefix
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Prefix used for intermediate main package resources .pri and .map.txt files.
        """
      ]
   }

start |= AppxBundleMainPackageFileMapSuffix

AppxBundleMainPackageFileMapSuffix = 
   element AppxBundleMainPackageFileMapSuffix
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Suffix used before extension of resource map files.
        """
      ]
   }

start |= AppxBundleMainPackageFileMapIntermediatePath

AppxBundleMainPackageFileMapIntermediatePath = 
   element AppxBundleMainPackageFileMapIntermediatePath
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Full path to an intermediate main package file map.
        """
      ]
   }

start |= AppxBundleMainPackageFileMapIntermediatePriPath

AppxBundleMainPackageFileMapIntermediatePriPath = 
   element AppxBundleMainPackageFileMapIntermediatePriPath
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Full path to an intermediate main package .pri file.
        """
      ]
   }

start |= AppxBundleMainPackageFileMapGeneratedFilesListPath

AppxBundleMainPackageFileMapGeneratedFilesListPath = 
   element AppxBundleMainPackageFileMapGeneratedFilesListPath
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Full path to a log file containing a list of generated files during generation of main package file map.
        """
      ]
   }

start |= AppxBundleMainPackageFileMapPrefix

AppxBundleMainPackageFileMapPrefix = 
   element AppxBundleMainPackageFileMapPrefix
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Prefix used for main package resources .pri and .map.txt files.
        """
      ]
   }

start |= AppxBundleMainPackageFileMapPath

AppxBundleMainPackageFileMapPath = 
   element AppxBundleMainPackageFileMapPath
   {
      StringPropertyType
      >>
      a:documentation [ """Full path to a main package file map. """ ]
   }

start |= AppxBundleFolderSuffix

AppxBundleFolderSuffix = 
   element AppxBundleFolderSuffix
   {
      StringPropertyType
      >>
      a:documentation [ """Suffix to append to app bundle folder. """ ]
   }

start |= PlatformSpecificBundleArtifactsListDir

PlatformSpecificBundleArtifactsListDir = 
   element PlatformSpecificBundleArtifactsListDir
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Full path to a folder where platform-specific bundle artifact list files are stored.
        """
      ]
   }

start |= AppxPackageAllowDebugFrameworkReferencesInManifest

AppxPackageAllowDebugFrameworkReferencesInManifest = 
   element AppxPackageAllowDebugFrameworkReferencesInManifest
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Flag indicating whether to allow inclusion of debug framework references in an app manifest.
        """
      ]
   }

start |= GenerateAppxPackageOnBuild

GenerateAppxPackageOnBuild = 
   element GenerateAppxPackageOnBuild
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Flag indicating whether to generate app package during the build.
        """
      ]
   }

start |= InsertReverseMap

InsertReverseMap = 
   element InsertReverseMap
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Flag indicating whether to insert reverse resource map during resource index generation.
        """
      ]
   }

start |= IncludeBuiltProjectOutputGroup

IncludeBuiltProjectOutputGroup = 
   element IncludeBuiltProjectOutputGroup
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Flag indicating whether to include primary build outputs into the app package payload.
        """
      ]
   }

start |= IncludeDebugSymbolsProjectOutputGroup

IncludeDebugSymbolsProjectOutputGroup = 
   element IncludeDebugSymbolsProjectOutputGroup
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Flag indicating whether to include debug symbols into the app package payload.
        """
      ]
   }

start |= IncludeDocumentationProjectOutputGroup

IncludeDocumentationProjectOutputGroup = 
   element IncludeDocumentationProjectOutputGroup
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Flag indicating whether to include documentation into the app package payload.
        """
      ]
   }

start |= IncludeSatelliteDllsProjectOutputGroup

IncludeSatelliteDllsProjectOutputGroup = 
   element IncludeSatelliteDllsProjectOutputGroup
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Flag indicating whether to include satellite DLLs into the app package payload.
        """
      ]
   }

start |= IncludeSourceFilesProjectOutputGroup

IncludeSourceFilesProjectOutputGroup = 
   element IncludeSourceFilesProjectOutputGroup
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Flag indicating whether to include source files into the app package payload.
        """
      ]
   }

start |= IncludeContentFilesProjectOutputGroup

IncludeContentFilesProjectOutputGroup = 
   element IncludeContentFilesProjectOutputGroup
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Flag indicating whether to include content files into the app package payload.
        """
      ]
   }

start |= IncludeSGenFilesOutputGroup

IncludeSGenFilesOutputGroup = 
   element IncludeSGenFilesOutputGroup
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Flag indicating whether to include SGen files into the app package payload.
        """
      ]
   }

start |= IncludeCopyLocalFilesOutputGroup

IncludeCopyLocalFilesOutputGroup = 
   element IncludeCopyLocalFilesOutputGroup
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Flag indicating whether to include files marked as 'Copy local' into the app package payload.
        """
      ]
   }

start |= IncludeComFilesOutputGroup

IncludeComFilesOutputGroup = 
   element IncludeComFilesOutputGroup
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Flag indicating whether to include COM files into the app package payload.
        """
      ]
   }

start |= IncludeCustomOutputGroupForPackaging

IncludeCustomOutputGroupForPackaging = 
   element IncludeCustomOutputGroupForPackaging
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Flag indicating whether to include custom output group into the app package payload.
        """
      ]
   }

start |= IncludeCopyWinmdArtifactsOutputGroup

IncludeCopyWinmdArtifactsOutputGroup = 
   element IncludeCopyWinmdArtifactsOutputGroup
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Flag indicating whether to include WinMD artifacts into the app package payload.
        """
      ]
   }

start |= IncludeSDKRedistOutputGroup

IncludeSDKRedistOutputGroup = 
   element IncludeSDKRedistOutputGroup
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Flag indicating whether to include SDK redist into the app package payload.
        """
      ]
   }

start |= IncludePriFilesOutputGroup

IncludePriFilesOutputGroup = 
   element IncludePriFilesOutputGroup
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Flag indicating whether to include resource index (PRI) files into the app package payload.
        """
      ]
   }

start |= IncludeGetResolvedSDKReferences

IncludeGetResolvedSDKReferences = 
   element IncludeGetResolvedSDKReferences
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Flag indicating whether to include resolved SDK references into the app package payload.
        """
      ]
   }

start |= ProjectPriIndexName

ProjectPriIndexName = 
   element ProjectPriIndexName
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Name of the resource index used in the generated .pri file.
        """
      ]
   }

start |= AutoIncrementPackageRevision

AutoIncrementPackageRevision = 
   element AutoIncrementPackageRevision
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Flag indicating whether to enable auto increment of an app package revision.
        """
      ]
   }

start |= AppxBundleDir

AppxBundleDir = 
   element AppxBundleDir
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Full path to a folder where app bundle will be produced.
        """
      ]
   }

start |= AppxPackageName

AppxPackageName = 
   element AppxPackageName
   {
      StringPropertyType
      >>
      a:documentation [ """Name of the app package to generate. """ ]
   }

start |= AppxStoreContainer

AppxStoreContainer = 
   element AppxStoreContainer
   {
      StringPropertyType
      >>
      a:documentation [ """Name of the app store container to generate. """ ]
   }

start |= AppxPackageTestDir

AppxPackageTestDir = 
   element AppxPackageTestDir
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Name of the folder where test app packages will be copied
        """
      ]
   }

start |= AppxPackageOutput

AppxPackageOutput = 
   element AppxPackageOutput
   {
      StringPropertyType
      >>
      a:documentation [ """Full path to the app package file. """ ]
   }

start |= AppxSymbolPackageOutput

AppxSymbolPackageOutput = 
   element AppxSymbolPackageOutput
   {
      StringPropertyType
      >>
      a:documentation [ """Full path to the app symbol package file. """ ]
   }

start |= AppxGenerateProjectPriFileAdditionalMakepriExeParameters

AppxGenerateProjectPriFileAdditionalMakepriExeParameters = 
   element AppxGenerateProjectPriFileAdditionalMakepriExeParameters
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Additional parameters to pass to makepri.exe when generating project PRI file.
        """
      ]
   }

start |= AppxCreatePriFilesForPortableLibrariesAdditionalMakepriExeParameters

AppxCreatePriFilesForPortableLibrariesAdditionalMakepriExeParameters = 
   element AppxCreatePriFilesForPortableLibrariesAdditionalMakepriExeParameters
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Additional parameters to pass to makepri.exe when generating PRI file for a portable library.
        """
      ]
   }

start |= AppxExpandPriContentAdditionalMakepriExeParameters

AppxExpandPriContentAdditionalMakepriExeParameters = 
   element AppxExpandPriContentAdditionalMakepriExeParameters
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Additional parameters to pass to makepri.exe when extracting payload file names.
        """
      ]
   }

start |= StoreManifestName

StoreManifestName = 
   element StoreManifestName
   {
      StringPropertyType
      >>
      a:documentation [ """Name of the store manifest file. """ ]
   }

start |= AppxValidateStoreManifest

AppxValidateStoreManifest = 
   element AppxValidateStoreManifest
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Flag indicating whether to validate store manifest.
        """
      ]
   }

start |= UapAppxPackageBuildMode

UapAppxPackageBuildMode = 
   element UapAppxPackageBuildMode
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Configures the created packages. Possible values are: StoreAndSideload (produces the appxupload and the sideloaded packages), StoreUpload (produces only the appxupload package), and SideloadOnly(produces only the packages for sideloading).
        """
      ]
   }

start |= EntryPointExe

EntryPointExe = 
   element EntryPointExe
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Windows Application Packaging project-specific: Enables the packaging of an executable without having the source code available.
        """
      ]
   }

start |= WapProjPath

WapProjPath = 
   element WapProjPath
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Windows Application Packaging project-specific: Path to Windows Application Packaging project root folder.

        """
      ]
   }

start |= EntryPointProjectUniqueName

EntryPointProjectUniqueName = 
   element EntryPointProjectUniqueName
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Windows Application Packaging project-specific: Relative path to entry point project file.

        """
      ]
   }

start |= EnableDirectStoreSubmission

EnableDirectStoreSubmission = 
   element EnableDirectStoreSubmission
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Enable Store Submission from the packaging wizard.
        """
      ]
   }

start |= OverwritePendingSubmission

OverwritePendingSubmission = 
   element OverwritePendingSubmission
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Overwrite Store Submission that has been queued by a previous build.
        """
      ]
   }

start |= AppxExcludeXbfFromSdkPayloadWhenXamlIsPresent

AppxExcludeXbfFromSdkPayloadWhenXamlIsPresent = 
   element AppxExcludeXbfFromSdkPayloadWhenXamlIsPresent
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Flag to exclude XBF files when XAML is present.
        """
      ]
   }

start |= AppxExcludeXamlFromLibraryLayoutsWhenXbfIsPresent

AppxExcludeXamlFromLibraryLayoutsWhenXbfIsPresent = 
   element AppxExcludeXamlFromLibraryLayoutsWhenXbfIsPresent
   {
      StringPropertyType
      >>
      a:documentation
      [
         """Flag to exclude XAML files when XBF is present.
        """
      ]
   }

start |= VSINSTALLDIR

VSINSTALLDIR = element VSINSTALLDIR { StringPropertyType }

start |= _StoreManifestSchemaDir

_StoreManifestSchemaDir = 
   element _StoreManifestSchemaDir { StringPropertyType }

SchemaItemType = 
   SimpleItemType,
   (
      ## Namespace alias used for this schema.
      ##                         

      element NamespaceAlias { text }?
    & ## Namespace URI used for this schema.
      ##                         

      element NamespaceUri { text }?
   )

start |= AppxManifestSchema

AppxManifestSchema = 
   element AppxManifestSchema
   {
      SchemaItemType
      >>
      a:documentation [ """App manifest schema file. """ ]
   }

start |= StoreManifestSchema

StoreManifestSchema = 
   element StoreManifestSchema
   {
      SchemaItemType
      >>
      a:documentation [ """Store manifest schema file. """ ]
   }

start |= AppxHashUri

AppxHashUri = 
   ## Hash algorithm URI.
   ##         

   element AppxHashUri
   {
      SimpleItemType,
      (
         ## Hash algorithm ID corresponding to given hash URI.
         ##                             

         element Id { text }?
      )
   }

start |= PRIResource

PRIResource = 
   ## String resources to be indexed in app package's resource index.
   ##         

   element PRIResource
   {
      SimpleItemType,
      (
         ## Notional path within project to indicate parent item of the current item (optional).
         ##                             

         element DependentUpon { text }??
       & ## Notional path within project to display if the file is physically located outside of the project file's cone (optional).
         ##                             

         element Link { text }??
       & element Visible
         {
            boolean
            >>
            a:documentation
            [
               """Display in user interface (optional, boolean).
                            """
            ]
         }??
      )
   }

start |= AppxSystemBinary

AppxSystemBinary = 
   element AppxSystemBinary
   {
      SimpleItemType
      >>
      a:documentation
      [
         """Name of any file which is present on the machine and should not be part of the app payload.
        """
      ]
   }

start |= AppxReservedFileName

AppxReservedFileName = 
   element AppxReservedFileName
   {
      SimpleItemType
      >>
      a:documentation
      [
         """Reserved file name which cannot appear in the app package.
        """
      ]
   }

start |= AppxManifestFileNameQuery

AppxManifestFileNameQuery = 
   element AppxManifestFileNameQuery
   {
      SimpleItemType
      >>
      a:documentation
      [
         """XPath queries used to extract file names from the app manifest.
        """
      ]
   }

start |= AppxManifestImageFileNameQuery

AppxManifestImageFileNameQuery = 
   ## XPath queries used to define image files in the app manifest and restrictions on them.
   ##         

   element AppxManifestImageFileNameQuery
   {
      SimpleItemType,
      (
         ## ID of description string resource describing this type of the image.
         ##                             

         element DescriptionID { text }?
       & ## Semicolon-delimited list of expected scale dimensions in format '{scale}:{width}x{height}'.
         ##                             

         element ExpectedScaleDimensions { text }?
       & ## Semicolon-delimited list of expected target sizes.
         ##                             

         element ExpectedTargetSizes { text }??
       & ## Maximum file size in bytes.
         ##                             

         element MaximumFileSize { text }??
      )
   }

start |= AppxManifest

AppxManifest = 
   ## app manifest template
   ##         

   element AppxManifest
   {
      SimpleItemType,
      (
         ## Notional path within project to indicate parent item of the current item (optional).
         ##                             

         element DependentUpon { text }??
       & ## Notional path within project to display if the file is physically located outside of the project file's cone (optional).
         ##                             

         element Link { text }??
       & ## Visual Studio sub-type for this item (optional).
         ##                             

         element SubType { text }??
       & element Visible
         {
            boolean
            >>
            a:documentation
            [
               """Display in user interface (optional, boolean).
                            """
            ]
         }??
      )
   }

start |= StoreAssociationFile

StoreAssociationFile = 
   ## A file containing app store association data.
   ##         

   element StoreAssociationFile
   {
      SimpleItemType,
      (
         ## Notional path within project to indicate parent item of the current item (optional).
         ##                             

         element DependentUpon { text }??
       & ## Notional path within project to display if the file is physically located outside of the project file's cone (optional).
         ##                             

         element Link { text }??
       & element Visible
         {
            boolean
            >>
            a:documentation
            [
               """Display in user interface (optional, boolean).
                            """
            ]
         }??
      )
   }

start |= AppxManifestMetadata

AppxManifestMetadata = 
   ## App manifest metadata item. Can be a literal, or it can be a path to a binary to extract version from.
   ##         

   element AppxManifestMetadata
   {
      SimpleItemType,
      (
         ## Literal value of app manifest metadata to insert into manifest.
         ##                             

         element Value { text }??
       & ## Version to be inserted as a value of app manifest metadata to insert into manifest.
         ##                             

         element Version { text }??
       & ## Name of app manifest metadata to insert into manifest.
         ##                             

         element Name { text }??
      )
   }

start |= PlatformVersionDescription

PlatformVersionDescription = 
   ## Platform version description. Used to map between internal OS version and marketing OS version.
   ##         

   element PlatformVersionDescription
   {
      SimpleItemType,
      (
         ## Target platform identifier.
         ##                             

         element TargetPlatformIdentifier { text }?
       & ## Target platform version.
         ##                             

         element TargetPlatformVersion { text }?
       & ## Internal OS version.
         ##                             

         element OSVersion { text }?
      )
   }

start |= AppxPackagePayload

AppxPackagePayload = 
   element AppxPackagePayload
   {
      SimpleItemType,
      ( element TargetPath { text }?? & element OutputGroup { text }?? )
   }

start |= ComFilesOutputGroupOutputs

ComFilesOutputGroupOutputs = 
   element ComFilesOutputGroupOutputs
   {
      SimpleItemType,
      ( element TargetPath { text }?? )
   }

start |= CopyWinmdArtifactsOutputGroupOutputs

CopyWinmdArtifactsOutputGroupOutputs = 
   element CopyWinmdArtifactsOutputGroupOutputs
   {
      SimpleItemType,
      ( element TargetPath { text }?? )
   }

start |= CopyLocalFilesOutputGroupOutput

CopyLocalFilesOutputGroupOutput = 
   element CopyLocalFilesOutputGroupOutput
   {
      SimpleItemType,
      ( element TargetPath { text }?? )
   }

start |= _PackagingOutputsUnexpanded

_PackagingOutputsUnexpanded = 
   element _PackagingOutputsUnexpanded
   {
      SimpleItemType,
      (
         element TargetPath { StringPropertyType }??
       & element OutputGroup { text }??
       & element ProjectName { text }??
      )
   }

start |= _GetResolvedSDKReferencesOutput

_GetResolvedSDKReferencesOutput = 
   element _GetResolvedSDKReferencesOutput
   {
      SimpleItemType,
      ( element OutputGroup { text }?? & element ProjectName { text }?? )
   }

start |= _ProjectArchitectureItem

_ProjectArchitectureItem = 
   element _ProjectArchitectureItem
   {
      SimpleItemType,
      ( element OutputGroup { text }?? & element ProjectName { text }?? )
   }

start |= _AppxBundleResourceFileMapsIntermediate

_AppxBundleResourceFileMapsIntermediate = 
   element _AppxBundleResourceFileMapsIntermediate
   {
      SimpleItemType,
      ( element ResourcePack { text }?? )
   }

start |= ProjectPriFile

ProjectPriFile = 
   element ProjectPriFile
   {
      SimpleItemType,
      (
         element TargetPath { text }??
       & element OutputGroup { text }??
       & element ProjectName { text }??
      )
   }

start |= _ProjectArchitectureFromPayload

_ProjectArchitectureFromPayload = 
   element _ProjectArchitectureFromPayload
   {
      SimpleItemType,
      ( element MSBuildSourceProjectFile { text }?? )
   }

ToolTaskType = 
   TaskType,
   attribute ExitCode { text }?,
   attribute YieldDuringToolExecution { boolean }?,
   attribute UseCommandProcessor { boolean }?,
   attribute EchoOff { boolean }?,
   attribute ToolExe { text }?,
   attribute ToolPath { text }?,
   attribute EnvironmentVariables { text }?,
   attribute Timeout { text }?,
   attribute StandardErrorImportance { text }?,
   attribute StandardOutputImportance { text }?,
   attribute LogStandardErrorAsError { boolean }?

start |= CreateAppStoreContainer

CreateAppStoreContainer = 
   element CreateAppStoreContainer
   {
      TaskType,
      attribute Items { text },
      attribute ProjectName { text },
      attribute OutputPath { text }?
   }

CreatePriConfigXmlTaskType = 
   TaskType,
   attribute PriConfigXmlPath { text },
   attribute PriInitialPath { text }?,
   attribute DefaultResourceLanguage { text },
   attribute DefaultResourceQualifiers { text },
   attribute ConvertDotsToSlashes { boolean }?,
   attribute IntermediateExtension { text },
   attribute PriConfigXmlPackagingSnippetPath { text }?,
   attribute PriConfigXmlDefaultSnippetPath { text }?,
   attribute TargetPlatformIdentifier { text },
   attribute TargetPlatformVersion { text }

start |= CreatePriConfigXmlTask

CreatePriConfigXmlTask = 
   element CreatePriConfigXmlTask { CreatePriConfigXmlTaskType }

start |= CreatePriConfigXmlForFullIndex

CreatePriConfigXmlForFullIndex = 
   element CreatePriConfigXmlForFullIndex
   {
      CreatePriConfigXmlTaskType,
      attribute LayoutResfilesPath { text },
      attribute ResourcesResfilesPath { text },
      attribute PriResfilesPath { text }
   }

CreatePriConfigXmlWithPackagingElementTaskType = 
   CreatePriConfigXmlTaskType,
   attribute AppxBundleAutoResourcePackageQualifiers { text }

start |= CreatePriConfigXmlForMainPackageFileMap

CreatePriConfigXmlForMainPackageFileMap = 
   element CreatePriConfigXmlForMainPackageFileMap
   {
      CreatePriConfigXmlWithPackagingElementTaskType
   }

start |= CreatePriConfigXmlForSplitting

CreatePriConfigXmlForSplitting = 
   element CreatePriConfigXmlForSplitting
   {
      CreatePriConfigXmlWithPackagingElementTaskType,
      attribute ResourcesPriFilePath { text }
   }

start |= CreatePriFilesForPortableLibraries

CreatePriFilesForPortableLibraries = 
   element CreatePriFilesForPortableLibraries
   {
      TaskType,
      attribute ContentToIndex { text },
      attribute MakePriExeFullPath { text },
      attribute MakePriExtensionPath { text }?,
      attribute IntermediateDirectory { text },
      attribute DefaultResourceLanguage { text },
      attribute DefaultResourceQualifiers { text },
      attribute IntermediateFileWrites { text }?,
      attribute CreatedPriFiles { text }?,
      attribute IntermediateExtension { text },
      attribute AdditionalMakepriExeParameters { text }?,
      attribute TargetPlatformIdentifier { text },
      attribute TargetPlatformVersion { text }
   }

start |= ExpandPayloadDirectories

ExpandPayloadDirectories = 
   element ExpandPayloadDirectories
   {
      TaskType,
      attribute Inputs { text },
      attribute Expanded { text }?
   }

start |= ExpandPriContent

ExpandPriContent = 
   element ExpandPriContent
   {
      ToolTaskType,
      attribute Inputs { text },
      attribute Expanded { text }?,
      attribute IntermediateFileWrites { text }?,
      attribute IntermediateDirectory { text },
      attribute AdditionalMakepriExeParameters { text }?,
      attribute MakePriExeFullPath { text },
      attribute MakePriExtensionPath { text }?
   }

start |= ExtractHashAlgorithmId

ExtractHashAlgorithmId = 
   element ExtractHashAlgorithmId
   {
      TaskType,
      attribute StoreAssociationFile { text }?,
      attribute HashUris { text },
      attribute HashAlgorithmId { text }?
   }

start |= FilterOutUnusedLanguagesResourceFileMaps

FilterOutUnusedLanguagesResourceFileMaps = 
   element FilterOutUnusedLanguagesResourceFileMaps
   {
      TaskType,
      attribute FileMaps { text },
      attribute FileNamePrefix { text },
      attribute MapSuffix { text },
      attribute Languages { text },
      attribute FilteredFileMaps { text }?
   }

start |= GenerateAppxManifest

GenerateAppxManifest = 
   element GenerateAppxManifest
   {
      TaskType,
      attribute ApplicationExecutableName { text }?,
      attribute AppxManifestInput { text },
      attribute CertificateThumbprint { text }?,
      attribute CertificateFile { text }?,
      attribute PackageArchitecture { text },
      attribute FrameworkSdkReferences { text },
      attribute NonFrameworkSdkReferences { text },
      attribute AppxManifestOutput { text },
      attribute DefaultResourceLanguage { text },
      attribute QualifiersPath { text },
      attribute ManagedWinmdInprocImplementation { text },
      attribute WinmdFiles { text },
      attribute SDKWinmdFiles { text },
      attribute OSMinVersion { text }?,
      attribute OSMaxVersionTested { text }?,
      attribute OSMinVersionReplaceManifestVersion { boolean }?,
      attribute OSMaxVersionTestedReplaceManifestVersion { boolean }?,
      attribute EnableSigningChecks { boolean }?,
      attribute ManifestMetadata { text }?,
      attribute TargetPlatformIdentifier { text }?,
      attribute PackageSigningEnabled { boolean }?
   }

start |= GenerateAppxPackageRecipe

GenerateAppxPackageRecipe = 
   element GenerateAppxPackageRecipe
   {
      TaskType,
      attribute AppxManifestXml { text },
      attribute SourceAppxManifest { text },
      attribute SolutionConfiguration { text },
      attribute PayloadFiles { text },
      attribute FrameworkSdkPackages { text },
      attribute RecipeFile { text },
      attribute SystemBinaries { text },
      attribute ReservedFileNames { text },
      attribute QueryNamespacePrefix { text },
      attribute QueryNamespace81Prefix { text },
      attribute ManifestFileNameQueries { text },
      attribute ManifestImageFileNameQueries { text },
      attribute PackageArchitecture { text },
      attribute ProjectDir { text },
      attribute TargetPlatformIdentifier { text },
      attribute IndexedPayloadFiles { text }?,
      attribute MakePriExtensionPath { text }?
   }

start |= GenerateAppxSymbolPackage

GenerateAppxSymbolPackage = 
   element GenerateAppxSymbolPackage
   {
      TaskType,
      attribute PdbCopyExeFullPath { text },
      attribute PdbFiles { text },
      attribute StrippedDirectory { text },
      attribute AppxSymbolPackageOutput { text },
      attribute ProjectName { text },
      attribute StrippedPdbs { text }?
   }

start |= GeneratePriConfigurationFiles

GeneratePriConfigurationFiles = 
   element GeneratePriConfigurationFiles
   {
      TaskType,
      attribute LayoutResfilesPath { text },
      attribute ResourcesResfilesPath { text },
      attribute PriResfilesPath { text },
      attribute LayoutFiles { text },
      attribute PRIResourceFiles { text },
      attribute PriFiles { text },
      attribute IntermediateExtension { text }
   }

start |= GenerateProjectArchitecturesFile

GenerateProjectArchitecturesFile = 
   element GenerateProjectArchitecturesFile
   {
      TaskType,
      attribute ProjectArchitectures { text },
      attribute ProjectArchitecturesFilePath { text }
   }

start |= GenerateProjectPriFile

GenerateProjectPriFile = 
   element GenerateProjectPriFile
   {
      ToolTaskType,
      attribute MakePriExeFullPath { text },
      attribute PriConfigXmlPath { text },
      attribute IndexFilesForQualifiersCollection { text }?,
      attribute ProjectPriIndexName { text },
      attribute MappingFileFormat { text }?,
      attribute InsertReverseMap { text }?,
      attribute ProjectDirectory { text },
      attribute OutputFileName { text },
      attribute MakePriExtensionPath { text }?,
      attribute QualifiersPath { text }?,
      attribute GeneratedFilesListPath { text }?,
      attribute AdditionalMakepriExeParameters { text }?,
      attribute MultipleQualifiersPerDimensionFoundPath { text }?,
      attribute IntermediateExtension { text }
   }

start |= GetAppxBundlePlatforms

GetAppxBundlePlatforms = 
   element GetAppxBundlePlatforms
   {
      TaskType,
      attribute Input { text },
      attribute PackageArchitecture { text },
      attribute Platforms { text }?,
      attribute Last { text }?
   }

start |= GetDefaultResourceLanguage

GetDefaultResourceLanguage = 
   element GetDefaultResourceLanguage
   {
      TaskType,
      attribute DefaultLanguage { text }?,
      attribute SourceAppxManifest { text }?,
      attribute DefaultResourceLanguage { text }?
   }

start |= GetFrameworkSdkPackages

GetFrameworkSdkPackages = 
   element GetFrameworkSdkPackages
   {
      TaskType,
      attribute FrameworkSdkReferences { text },
      attribute FrameworkSdkPackages { text }?
   }

start |= GetPackageArchitecture

GetPackageArchitecture = 
   element GetPackageArchitecture
   {
      TaskType,
      attribute Platform { text },
      attribute ProjectArchitecture { text },
      attribute RecursiveProjectArchitecture { text },
      attribute PackageArchitecture { text }?
   }

start |= GetSdkPropertyValue

GetSdkPropertyValue = 
   element GetSdkPropertyValue
   {
      TaskType,
      attribute TargetPlatformIdentifier { text },
      attribute TargetPlatformVersion { text },
      attribute TargetPlatformSdkRootOverride { text }?,
      attribute PropertyName { text },
      attribute PropertyValue { text }?
   }

start |= GetSdkToolFullPath

GetSdkToolFullPath = 
   element GetSdkToolFullPath
   {
      TaskType,
      attribute ToolName { text },
      attribute ToolFullPath { text }?,
      attribute TargetPlatformIdentifier { text },
      attribute TargetPlatformVersion { text },
      attribute TargetPlatformSdkRootOverride { text }?,
      attribute MSBuildArchitecture { text }?,
      attribute ActualToolFullPath { text }?
   }

start |= GetWindowsDesktopSdkDir

GetWindowsDesktopSdkDir = 
   element GetWindowsDesktopSdkDir
   {
      TaskType,
      attribute TargetPlatformIdentifier { text },
      attribute TargetPlatformVersion { text },
      attribute TargetPlatformSdkRootOverride { text }?,
      attribute WindowsDesktopSdkDir { text }?
   }

MakeAppxType = 
   ToolTaskType,
   attribute MakeAppxExeFullPath { text },
   attribute Parameters { text }?

MakeAppxWithOutputType = MakeAppxType, attribute Output { text }

start |= MakeAppxBundle

MakeAppxBundle = 
   element MakeAppxBundle
   {
      MakeAppxWithOutputType,
      attribute BundleDir { text }
   }

start |= MakeAppxPack

MakeAppxPack = 
   element MakeAppxPack
   {
      MakeAppxWithOutputType,
      attribute ResourcePack { boolean }?,
      attribute ValidateResourcesReferencedByManifest { boolean }?,
      attribute HashAlgorithmId { text },
      attribute AppxManifest { text }?,
      attribute FileMap { text }
   }

start |= ParsePlatformSpecificBundleArtifactsLists

ParsePlatformSpecificBundleArtifactsLists = 
   element ParsePlatformSpecificBundleArtifactsLists
   {
      TaskType,
      attribute Files { text },
      attribute Artifacts { text }?
   }

start |= RemoveDuplicatePayload

RemoveDuplicatePayload = 
   element RemoveDuplicatePayload
   {
      TaskType,
      attribute Inputs { text },
      attribute Platform { text },
      attribute Filtered { text }?
   }

start |= RemoveDuplicatePriFiles

RemoveDuplicatePriFiles = 
   element RemoveDuplicatePriFiles
   {
      TaskType,
      attribute Inputs { text },
      attribute Platform { text },
      attribute Filtered { text }?
   }

start |= RemoveDuplicateSDKReferences

RemoveDuplicateSDKReferences = 
   element RemoveDuplicateSDKReferences
   {
      TaskType,
      attribute Inputs { text },
      attribute Filtered { text }?
   }

start |= SignAppxPackage

SignAppxPackage = 
   element SignAppxPackage
   {
      TaskType,
      attribute AppxPackageToSign { text },
      attribute CertificateThumbprint { text }?,
      attribute CertificateFile { text }?,
      attribute HashAlgorithmId { text },
      attribute TargetPlatformIdentifier { text },
      attribute TargetPlatformVersion { text },
      attribute TargetPlatformSdkRootOverride { text }?,
      attribute SignAppxPackageExeFullPath { text }?,
      attribute MSBuildArchitecture { text }?,
      attribute EnableSigningChecks { boolean }?,
      attribute ExportCertificate { boolean }?,
      attribute ResolvedThumbprint { text }?,
      attribute AppxPackagePublicKeyFile { text }?
   }

start |= StripPrivateSymbols

StripPrivateSymbols = 
   element StripPrivateSymbols
   {
      ToolTaskType,
      attribute PdbCopyToolPath { text },
      attribute InputPdb { text },
      attribute StrippedPdb { text }
   }

start |= Unzip

Unzip = 
   element Unzip
   {
      TaskType,
      attribute DestinationFiles { text }?,
      attribute DestinationFolder { text },
      attribute OverwriteReadOnlyFiles { boolean }?,
      attribute SkipUnchangedFiles { boolean }?,
      attribute SourceFiles { text },
      attribute UnzippedFiles { text }?
   }

start |= UpdateAppxManifestForBundle

UpdateAppxManifestForBundle = 
   element UpdateAppxManifestForBundle
   {
      TaskType,
      attribute FinalAppxManifest { text },
      attribute AppxManifestForBundle { text }
   }

start |= UpdateMainPackageFileMap

UpdateMainPackageFileMap = 
   element UpdateMainPackageFileMap
   {
      TaskType,
      attribute Input { text },
      attribute Output { text },
      attribute SplitResourcesPriPath { text },
      attribute DefaultResourceLanguage { text },
      attribute DefaultResourceQualifiers { text }
   }

start |= ValidateAppxManifest

ValidateAppxManifest = 
   element ValidateAppxManifest
   {
      TaskType,
      attribute Input { text },
      attribute SourceAppxManifest { text },
      attribute AppxManifestSchema { text },
      attribute StoreAssociationFile { text }?,
      attribute TargetPlatformIdentifier { text },
      attribute TargetPlatformVersion { text },
      attribute OSMinVersion { text },
      attribute OSMaxVersionTested { text },
      attribute PlatformVersionDescriptions { text },
      attribute ResolvedSDKReferences { text },
      attribute StrictManifestValidationEnabled { boolean }?,
      attribute ValidateWinmds { boolean }?,
      attribute NonFrameworkSdkReferences { text }?,
      attribute WinmdFiles { text }?,
      attribute SDKWinmdFiles { text }?,
      attribute ManagedWinmdInprocImplementation { text }?,
      attribute ValidateManifest { boolean }?,
      attribute Resources { text }?
   }

start |= ValidateAppxManifestItems

ValidateAppxManifestItems = 
   element ValidateAppxManifestItems
   {
      TaskType,
      attribute AppxManifestItems { text }?,
      attribute CustomAppxManifestItems { text }?,
      attribute AppxPackageProject { boolean }?,
      attribute IdentityName { text }?,
      attribute IdentityVersion { text }?
   }

start |= ValidateAppxPackage

ValidateAppxPackage = 
   element ValidateAppxPackage
   {
      TaskType,
      attribute SourceAppxManifest { text },
      attribute AppxManifest { text },
      attribute StoreAssociationFile { text }?,
      attribute PackageArchitecture { text },
      attribute AppxPackagePayload { text },
      attribute QueryNamespacePrefix { text },
      attribute QueryNamespace81Prefix { text },
      attribute ManifestImageFileNameQueries { text },
      attribute ResolvedSDKReferences { text },
      attribute AllowDebugFrameworkReferencesInManifest { boolean }?,
      attribute ProjectDir { text },
      attribute IndexedPayloadFiles { text }?,
      attribute MakePriExtensionPath { text }?,
      attribute OSMinVersion { text }?
   }

start |= ValidateStoreManifest

ValidateStoreManifest = 
   element ValidateStoreManifest
   {
      TaskType,
      attribute Input { text },
      attribute StoreManifestSchema { text }
   }

start |= DownloadFile

DownloadFile = 
   element DownloadFile
   {
      TaskType,
      attribute DestinationFileName { text }?,
      attribute DestinationFolder { text },
      attribute DownloadedFile { text }?,
      attribute Retries { text }?,
      attribute RetryDelayMilliseconds { text }?,
      attribute SkipUnchangedFiles { text }?,
      attribute SourceUrl { text }
   }

start |= ZipDirectory

ZipDirectory = 
   element ZipDirectory
   {
      TaskType,
      attribute DestinationFile { text },
      attribute Overwrite { boolean }?,
      attribute SourceDirectory { boolean }?
   }

start |= Using

Using = 
   ## A C# global using to add to the project.
   ## 
    
   ##     

   element Using
   {
      SimpleItemType,
      attribute Include
      {
         ## The namespace or type identifier to add, e.g. Microsoft.AspNetCore
         ## 
            
         ##             

         xsd:string
      }?,
      attribute Alias
      {
         ## Optional alias for the namespace or type.
         ## 
            
         ##             

         xsd:string
      }?,
      attribute Static
      {
         boolean
         >>
         a:documentation
         [
            """Determines whether the identifier should be registered as a static import.

            """
         ]
      }?
   }

start |= InternalsVisibleTo

InternalsVisibleTo = 
   ## Specifies that internal types and members are visible to the specified friend assemblies.
   ## 
  
   ##   

   element InternalsVisibleTo
   {
      SimpleItemType,
      attribute Include
      {
         ## The name of the friend assembly to make internal types and members visible to.
         ## 
            
         ##             

         xsd:string
      }?,
      attribute PublicKey
      {
         ## Optional public key associated with the strong name signature of the friend assembly.
         ## 
            
         ##             

         xsd:string
      }?
   }
